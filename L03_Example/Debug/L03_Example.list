
L03_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003d68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003d68  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffd4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002476  00000000  00000000  00030053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000324d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae3  00000000  00000000  000332d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c4d  00000000  00000000  00033db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125b7  00000000  00000000  00059a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecaea  00000000  00000000  0006bfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003994  00000000  00000000  00158aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0015c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003d1c 	.word	0x08003d1c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003d1c 	.word	0x08003d1c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4ba6      	ldr	r3, [pc, #664]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4aa5      	ldr	r2, [pc, #660]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4ba3      	ldr	r3, [pc, #652]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	623b      	str	r3, [r7, #32]
 8000530:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4ba0      	ldr	r3, [pc, #640]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a9f      	ldr	r2, [pc, #636]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b9d      	ldr	r3, [pc, #628]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b9a      	ldr	r3, [pc, #616]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a99      	ldr	r2, [pc, #612]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b97      	ldr	r3, [pc, #604]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	61bb      	str	r3, [r7, #24]
 8000560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b94      	ldr	r3, [pc, #592]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a93      	ldr	r2, [pc, #588]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b91      	ldr	r3, [pc, #580]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057a:	4b8e      	ldr	r3, [pc, #568]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a8d      	ldr	r2, [pc, #564]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000580:	f043 0320 	orr.w	r3, r3, #32
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b8b      	ldr	r3, [pc, #556]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0320 	and.w	r3, r3, #32
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	4b88      	ldr	r3, [pc, #544]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a87      	ldr	r2, [pc, #540]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b85      	ldr	r3, [pc, #532]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	4b82      	ldr	r3, [pc, #520]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a81      	ldr	r2, [pc, #516]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b7f      	ldr	r3, [pc, #508]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005c2:	4b7c      	ldr	r3, [pc, #496]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a7b      	ldr	r2, [pc, #492]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b79      	ldr	r3, [pc, #484]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCILLOSCOPE_OUT_GPIO_Port, OSCILLOSCOPE_OUT_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2108      	movs	r1, #8
 80005de:	4876      	ldr	r0, [pc, #472]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 80005e0:	f000 fee0 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f244 0181 	movw	r1, #16513	; 0x4081
 80005ea:	4874      	ldr	r0, [pc, #464]	; (80007bc <MX_GPIO_Init+0x2b8>)
 80005ec:	f000 feda 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	4872      	ldr	r0, [pc, #456]	; (80007c0 <MX_GPIO_Init+0x2bc>)
 80005f8:	f000 fed4 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f244 2140 	movw	r1, #16960	; 0x4240
 8000602:	4870      	ldr	r0, [pc, #448]	; (80007c4 <MX_GPIO_Init+0x2c0>)
 8000604:	f000 fece 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061c:	4619      	mov	r1, r3
 800061e:	486a      	ldr	r0, [pc, #424]	; (80007c8 <MX_GPIO_Init+0x2c4>)
 8000620:	f000 fd14 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000624:	2332      	movs	r3, #50	; 0x32
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000634:	230b      	movs	r3, #11
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063c:	4619      	mov	r1, r3
 800063e:	4862      	ldr	r0, [pc, #392]	; (80007c8 <MX_GPIO_Init+0x2c4>)
 8000640:	f000 fd04 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000644:	2386      	movs	r3, #134	; 0x86
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000650:	2303      	movs	r3, #3
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000654:	230b      	movs	r3, #11
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	4619      	mov	r1, r3
 800065e:	4856      	ldr	r0, [pc, #344]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 8000660:	f000 fcf4 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCILLOSCOPE_OUT_Pin;
 8000664:	2308      	movs	r3, #8
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OSCILLOSCOPE_OUT_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	484f      	ldr	r0, [pc, #316]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 800067c:	f000 fce6 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000680:	f244 0381 	movw	r3, #16513	; 0x4081
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	4619      	mov	r1, r3
 8000698:	4848      	ldr	r0, [pc, #288]	; (80007bc <MX_GPIO_Init+0x2b8>)
 800069a:	f000 fcd7 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 800069e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	4842      	ldr	r0, [pc, #264]	; (80007c0 <MX_GPIO_Init+0x2bc>)
 80006b6:	f000 fcc9 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD6_Pin;
 80006ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	4619      	mov	r1, r3
 80006d2:	483b      	ldr	r0, [pc, #236]	; (80007c0 <MX_GPIO_Init+0x2bc>)
 80006d4:	f000 fcba 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 80006d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e4:	2302      	movs	r3, #2
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	4619      	mov	r1, r3
 80006ee:	4837      	ldr	r0, [pc, #220]	; (80007cc <MX_GPIO_Init+0x2c8>)
 80006f0:	f000 fcac 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000706:	230b      	movs	r3, #11
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	4619      	mov	r1, r3
 8000710:	482a      	ldr	r0, [pc, #168]	; (80007bc <MX_GPIO_Init+0x2b8>)
 8000712:	f000 fc9b 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8000716:	f244 2340 	movw	r3, #16960	; 0x4240
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072c:	4619      	mov	r1, r3
 800072e:	4825      	ldr	r0, [pc, #148]	; (80007c4 <MX_GPIO_Init+0x2c0>)
 8000730:	f000 fc8c 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000744:	4619      	mov	r1, r3
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <MX_GPIO_Init+0x2c0>)
 8000748:	f000 fc80 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800074c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800075e:	230a      	movs	r3, #10
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 800076a:	f000 fc6f 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800076e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 8000784:	f000 fc62 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000788:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079a:	230b      	movs	r3, #11
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_GPIO_Init+0x2c0>)
 80007a6:	f000 fc51 	bl	800104c <HAL_GPIO_Init>

}
 80007aa:	bf00      	nop
 80007ac:	3738      	adds	r7, #56	; 0x38
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40021400 	.word	0x40021400
 80007c4:	40021800 	.word	0x40021800
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40021000 	.word	0x40021000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fa39 	bl	8000c4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f82c 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f7ff fe92 	bl	8000504 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007e0:	f000 f972 	bl	8000ac8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80007e4:	f000 f904 	bl	80009f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80007e8:	480f      	ldr	r0, [pc, #60]	; (8000828 <main+0x58>)
 80007ea:	f001 ff81 	bl	80026f0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE))
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <main+0x58>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d1f8      	bne.n	80007ee <main+0x1e>
	  {
		  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <main+0x58>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f06f 0201 	mvn.w	r2, #1
 8000804:	611a      	str	r2, [r3, #16]
		  Var ^= 1; // for software tools
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <main+0x5c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	f083 0301 	eor.w	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf14      	ite	ne
 8000814:	2301      	movne	r3, #1
 8000816:	2300      	moveq	r3, #0
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <main+0x5c>)
 800081c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(OSCILLOSCOPE_OUT_GPIO_Port, OSCILLOSCOPE_OUT_Pin); // for hardware tools (oscilloscope)
 800081e:	2108      	movs	r1, #8
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <main+0x60>)
 8000822:	f000 fdd8 	bl	80013d6 <HAL_GPIO_TogglePin>
	  if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE))
 8000826:	e7e2      	b.n	80007ee <main+0x1e>
 8000828:	2000002c 	.word	0x2000002c
 800082c:	20000028 	.word	0x20000028
 8000830:	40020000 	.word	0x40020000

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	; 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	; 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fa3d 	bl	8003cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000858:	f000 fdd8 	bl	800140c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <SystemClock_Config+0xd4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a29      	ldr	r2, [pc, #164]	; (8000908 <SystemClock_Config+0xd4>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <SystemClock_Config+0xd4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <SystemClock_Config+0xd8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a24      	ldr	r2, [pc, #144]	; (800090c <SystemClock_Config+0xd8>)
 800087a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008a4:	23d8      	movs	r3, #216	; 0xd8
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008ac:	2303      	movs	r3, #3
 80008ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fe09 	bl	80014cc <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008c0:	f000 f826 	bl	8000910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008c4:	f000 fdb2 	bl	800142c <HAL_PWREx_EnableOverDrive>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ce:	f000 f81f 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2107      	movs	r1, #7
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 f88f 	bl	8001a14 <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008fc:	f000 f808 	bl	8000910 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	3750      	adds	r7, #80	; 0x50
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x44>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x44>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x44>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x44>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x44>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f988 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <USART3_IRQHandler+0x10>)
 80009be:	f002 f9e7 	bl	8002d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000078 	.word	0x20000078

080009cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a18:	226b      	movs	r2, #107	; 0x6b
 8000a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a24:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a36:	4814      	ldr	r0, [pc, #80]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a38:	f001 fe02 	bl	8002640 <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a42:	f7ff ff65 	bl	8000910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4619      	mov	r1, r3
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a54:	f001 febc 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a5e:	f7ff ff57 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_TIM2_Init+0x98>)
 8000a70:	f002 f8b2 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a7a:	f7ff ff49 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000002c 	.word	0x2000002c

08000a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a9c:	d10b      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_TIM_Base_MspInit+0x38>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_TIM_Base_MspInit+0x38>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_TIM_Base_MspInit+0x38>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MX_USART3_UART_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b0c:	f002 f8f2 	bl	8002cf4 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b16:	f7ff fefb 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000078 	.word	0x20000078
 8000b24:	40004800 	.word	0x40004800

08000b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0aa      	sub	sp, #168	; 0xa8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2284      	movs	r2, #132	; 0x84
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 f8ba 	bl	8003cc2 <memset>
  if(uartHandle->Instance==USART3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_UART_MspInit+0xc4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d144      	bne.n	8000be2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f97a 	bl	8001e60 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff fecd 	bl	8000910 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_UART_MspInit+0xcc>)
 8000bce:	f000 fa3d 	bl	800104c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2027      	movs	r0, #39	; 0x27
 8000bd8:	f000 f96f 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bdc:	2027      	movs	r0, #39	; 0x27
 8000bde:	f000 f988 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	37a8      	adds	r7, #168	; 0xa8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004800 	.word	0x40004800
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c22:	f7ff fed3 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f003 f855 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fdd1 	bl	80007d0 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c3c:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000c40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c44:	20000104 	.word	0x20000104

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>

08000c4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f000 f928 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 f805 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5a:	f7ff fe5f 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f943 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f90b 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000100 	.word	0x20000100

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000100 	.word	0x20000100

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <__NVIC_SetPriorityGrouping+0x40>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x40>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	05fa0000 	.word	0x05fa0000

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff3e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff31 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff feda 	bl	8000cec <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d008      	beq.n	8000f58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e052      	b.n	8000ffe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0216 	bic.w	r2, r2, #22
 8000f66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	695a      	ldr	r2, [r3, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d103      	bne.n	8000f88 <HAL_DMA_Abort+0x62>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0208 	bic.w	r2, r2, #8
 8000f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa8:	e013      	b.n	8000fd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000faa:	f7ff fe9f 	bl	8000cec <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d90c      	bls.n	8000fd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e015      	b.n	8000ffe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e4      	bne.n	8000faa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe4:	223f      	movs	r2, #63	; 0x3f
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d004      	beq.n	8001024 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e00c      	b.n	800103e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2205      	movs	r2, #5
 8001028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e175      	b.n	8001358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8164 	bne.w	8001352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x56>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80be 	beq.w	8001352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b66      	ldr	r3, [pc, #408]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011ee:	4a61      	ldr	r2, [pc, #388]	; (8001374 <HAL_GPIO_Init+0x328>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d037      	beq.n	800128a <HAL_GPIO_Init+0x23e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_GPIO_Init+0x330>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d031      	beq.n	8001286 <HAL_GPIO_Init+0x23a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a56      	ldr	r2, [pc, #344]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d02b      	beq.n	8001282 <HAL_GPIO_Init+0x236>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x232>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a54      	ldr	r2, [pc, #336]	; (8001388 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a53      	ldr	r2, [pc, #332]	; (800138c <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x22a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a51      	ldr	r2, [pc, #324]	; (8001394 <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_GPIO_Init+0x34c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x350>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x21a>
 8001262:	2309      	movs	r3, #9
 8001264:	e012      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001266:	230a      	movs	r3, #10
 8001268:	e010      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126a:	2308      	movs	r3, #8
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126e:	2307      	movs	r3, #7
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x240>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x328>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_GPIO_Init+0x354>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x354>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x354>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x354>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae86 	bls.w	800106c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40022000 	.word	0x40022000
 800139c:	40022400 	.word	0x40022400
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800145a:	f7ff fc47 	bl	8000cec <HAL_GetTick>
 800145e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001460:	e009      	b.n	8001476 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001462:	f7ff fc43 	bl	8000cec <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001470:	d901      	bls.n	8001476 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e022      	b.n	80014bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001482:	d1ee      	bne.n	8001462 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001490:	f7ff fc2c 	bl	8000cec <HAL_GetTick>
 8001494:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001496:	e009      	b.n	80014ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001498:	f7ff fc28 	bl	8000cec <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a6:	d901      	bls.n	80014ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e007      	b.n	80014bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014b8:	d1ee      	bne.n	8001498 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e291      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8087 	beq.w	80015fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f0:	4b96      	ldr	r3, [pc, #600]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d00c      	beq.n	8001516 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fc:	4b93      	ldr	r3, [pc, #588]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d112      	bne.n	800152e <HAL_RCC_OscConfig+0x62>
 8001508:	4b90      	ldr	r3, [pc, #576]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001514:	d10b      	bne.n	800152e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	4b8d      	ldr	r3, [pc, #564]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d06c      	beq.n	80015fc <HAL_RCC_OscConfig+0x130>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d168      	bne.n	80015fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e26b      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x7a>
 8001538:	4b84      	ldr	r3, [pc, #528]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a83      	ldr	r2, [pc, #524]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e02e      	b.n	80015a4 <HAL_RCC_OscConfig+0xd8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x9c>
 800154e:	4b7f      	ldr	r3, [pc, #508]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a7e      	ldr	r2, [pc, #504]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b7c      	ldr	r3, [pc, #496]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a7b      	ldr	r2, [pc, #492]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e01d      	b.n	80015a4 <HAL_RCC_OscConfig+0xd8>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0xc0>
 8001572:	4b76      	ldr	r3, [pc, #472]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a75      	ldr	r2, [pc, #468]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b73      	ldr	r3, [pc, #460]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a72      	ldr	r2, [pc, #456]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xd8>
 800158c:	4b6f      	ldr	r3, [pc, #444]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a6e      	ldr	r2, [pc, #440]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b6c      	ldr	r3, [pc, #432]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a6b      	ldr	r2, [pc, #428]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb9e 	bl	8000cec <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb9a 	bl	8000cec <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e21f      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b61      	ldr	r3, [pc, #388]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb8a 	bl	8000cec <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb86 	bl	8000cec <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e20b      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x110>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d069      	beq.n	80016de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160a:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001616:	4b4d      	ldr	r3, [pc, #308]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d11c      	bne.n	800165c <HAL_RCC_OscConfig+0x190>
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x17a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e1df      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	493d      	ldr	r1, [pc, #244]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e040      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d023      	beq.n	80016ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a38      	ldr	r2, [pc, #224]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fb3c 	bl	8000cec <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fb38 	bl	8000cec <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1bd      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4929      	ldr	r1, [pc, #164]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
 80016aa:	e018      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb18 	bl	8000cec <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fb14 	bl	8000cec <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e199      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d038      	beq.n	800175c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d019      	beq.n	8001726 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80016f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <HAL_RCC_OscConfig+0x280>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff faf5 	bl	8000cec <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff faf1 	bl	8000cec <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e176      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x23a>
 8001724:	e01a      	b.n	800175c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_OscConfig+0x280>)
 8001728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fadb 	bl	8000cec <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fad7 	bl	8000cec <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d903      	bls.n	8001750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e15c      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
 800174c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	4b91      	ldr	r3, [pc, #580]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ee      	bne.n	800173a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80a4 	beq.w	80018b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b8b      	ldr	r3, [pc, #556]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10d      	bne.n	8001792 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b88      	ldr	r3, [pc, #544]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a87      	ldr	r2, [pc, #540]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b85      	ldr	r3, [pc, #532]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001792:	4b82      	ldr	r3, [pc, #520]	; (800199c <HAL_RCC_OscConfig+0x4d0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800179e:	4b7f      	ldr	r3, [pc, #508]	; (800199c <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7e      	ldr	r2, [pc, #504]	; (800199c <HAL_RCC_OscConfig+0x4d0>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fa9f 	bl	8000cec <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff fa9b 	bl	8000cec <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e120      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	4b75      	ldr	r3, [pc, #468]	; (800199c <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x31a>
 80017d8:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a6e      	ldr	r2, [pc, #440]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_OscConfig+0x376>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x33c>
 80017ee:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f2:	4a69      	ldr	r2, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6713      	str	r3, [r2, #112]	; 0x70
 80017fa:	4b67      	ldr	r3, [pc, #412]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	6713      	str	r3, [r2, #112]	; 0x70
 8001806:	e01c      	b.n	8001842 <HAL_RCC_OscConfig+0x376>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x35e>
 8001810:	4b61      	ldr	r3, [pc, #388]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a60      	ldr	r2, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x376>
 800182a:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a5a      	ldr	r2, [pc, #360]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d015      	beq.n	8001876 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fa4f 	bl	8000cec <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fa4b 	bl	8000cec <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0ce      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ee      	beq.n	8001852 <HAL_RCC_OscConfig+0x386>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff fa39 	bl	8000cec <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fa35 	bl	8000cec <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80a4 	beq.w	8001a04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d06b      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d149      	bne.n	8001964 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a30      	ldr	r2, [pc, #192]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80018d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fa06 	bl	8000cec <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fa02 	bl	8000cec <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e087      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	4313      	orrs	r3, r2
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800192a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800192e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f9d6 	bl	8000cec <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f9d2 	bl	8000cec <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e057      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x478>
 8001962:	e04f      	b.n	8001a04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800196a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f9bc 	bl	8000cec <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f9b8 	bl	8000cec <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e03d      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x4ac>
 8001996:	e035      	b.n	8001a04 <HAL_RCC_OscConfig+0x538>
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x544>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d028      	beq.n	8001a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d121      	bne.n	8001a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d8:	4293      	cmp	r3, r2
 80019da:	d111      	bne.n	8001a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0d0      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 020f 	bic.w	r2, r3, #15
 8001a42:	4965      	ldr	r1, [pc, #404]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0b8      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	494d      	ldr	r1, [pc, #308]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d040      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e07f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e073      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06b      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4936      	ldr	r1, [pc, #216]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b08:	f7ff f8f0 	bl	8000cec <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff f8ec 	bl	8000cec <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e053      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d210      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 020f 	bic.w	r2, r3, #15
 8001b4e:	4922      	ldr	r1, [pc, #136]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e032      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4916      	ldr	r1, [pc, #88]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f821 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	490a      	ldr	r1, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb8:	5ccb      	ldrb	r3, [r1, r3]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x1d4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f84c 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023c00 	.word	0x40023c00
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08003d34 	.word	0x08003d34
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf0:	b094      	sub	sp, #80	; 0x50
 8001bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d00d      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x40>
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	f200 80e1 	bhi.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x34>
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c1e:	e0db      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4b73      	ldr	r3, [pc, #460]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c24:	e0db      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c26:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c2a:	e0d8      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c42:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	099b      	lsrs	r3, r3, #6
 8001c48:	2200      	movs	r2, #0
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c5e:	4622      	mov	r2, r4
 8001c60:	462b      	mov	r3, r5
 8001c62:	f04f 0000 	mov.w	r0, #0
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	0159      	lsls	r1, r3, #5
 8001c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c70:	0150      	lsls	r0, r2, #5
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4621      	mov	r1, r4
 8001c78:	1a51      	subs	r1, r2, r1
 8001c7a:	6139      	str	r1, [r7, #16]
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c90:	4659      	mov	r1, fp
 8001c92:	018b      	lsls	r3, r1, #6
 8001c94:	4651      	mov	r1, sl
 8001c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	018a      	lsls	r2, r1, #6
 8001c9e:	4651      	mov	r1, sl
 8001ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cbe:	4690      	mov	r8, r2
 8001cc0:	4699      	mov	r9, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	eb18 0303 	adds.w	r3, r8, r3
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	eb49 0303 	adc.w	r3, r9, r3
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cde:	4629      	mov	r1, r5
 8001ce0:	024b      	lsls	r3, r1, #9
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ce8:	4621      	mov	r1, r4
 8001cea:	024a      	lsls	r2, r1, #9
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cfc:	f7fe fa84 	bl	8000208 <__aeabi_uldivmod>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4613      	mov	r3, r2
 8001d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d08:	e058      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	2200      	movs	r2, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	4611      	mov	r1, r2
 8001d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d1a:	623b      	str	r3, [r7, #32]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d24:	4642      	mov	r2, r8
 8001d26:	464b      	mov	r3, r9
 8001d28:	f04f 0000 	mov.w	r0, #0
 8001d2c:	f04f 0100 	mov.w	r1, #0
 8001d30:	0159      	lsls	r1, r3, #5
 8001d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d36:	0150      	lsls	r0, r2, #5
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d42:	4649      	mov	r1, r9
 8001d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d60:	eb63 050b 	sbc.w	r5, r3, fp
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	00eb      	lsls	r3, r5, #3
 8001d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d72:	00e2      	lsls	r2, r4, #3
 8001d74:	4614      	mov	r4, r2
 8001d76:	461d      	mov	r5, r3
 8001d78:	4643      	mov	r3, r8
 8001d7a:	18e3      	adds	r3, r4, r3
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	464b      	mov	r3, r9
 8001d80:	eb45 0303 	adc.w	r3, r5, r3
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d92:	4629      	mov	r1, r5
 8001d94:	028b      	lsls	r3, r1, #10
 8001d96:	4621      	mov	r1, r4
 8001d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	028a      	lsls	r2, r1, #10
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da6:	2200      	movs	r2, #0
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	61fa      	str	r2, [r7, #28]
 8001dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db0:	f7fe fa2a 	bl	8000208 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4613      	mov	r3, r2
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3750      	adds	r7, #80	; 0x50
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	007a1200 	.word	0x007a1200

08001df8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0a9b      	lsrs	r3, r3, #10
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	08003d44 	.word	0x08003d44

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e3c:	f7ff ffdc 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0b5b      	lsrs	r3, r3, #13
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	08003d44 	.word	0x08003d44

08001e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d012      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e88:	4b69      	ldr	r3, [pc, #420]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a68      	ldr	r2, [pc, #416]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e92:	6093      	str	r3, [r2, #8]
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	4964      	ldr	r1, [pc, #400]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d017      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	4959      	ldr	r1, [pc, #356]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ed8:	d101      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d017      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	494a      	ldr	r1, [pc, #296]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f14:	d101      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 808b 	beq.w	800205a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a39      	ldr	r2, [pc, #228]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f68:	f7fe fec0 	bl	8000cec <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7fe febc 	bl	8000cec <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e357      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f8e:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d035      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d02e      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d114      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fe84 	bl	8000cec <HAL_GetTick>
 8001fe4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fe80 	bl	8000cec <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e319      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ee      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002016:	d111      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002026:	400b      	ands	r3, r1
 8002028:	4901      	ldr	r1, [pc, #4]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
 800202e:	e00b      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000
 8002038:	0ffffcff 	.word	0x0ffffcff
 800203c:	4baa      	ldr	r3, [pc, #680]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4aa9      	ldr	r2, [pc, #676]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002042:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002046:	6093      	str	r3, [r2, #8]
 8002048:	4ba7      	ldr	r3, [pc, #668]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	49a4      	ldr	r1, [pc, #656]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002056:	4313      	orrs	r3, r2
 8002058:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002066:	4ba0      	ldr	r3, [pc, #640]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206c:	4a9e      	ldr	r2, [pc, #632]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800206e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002072:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002076:	4b9c      	ldr	r3, [pc, #624]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002078:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	4999      	ldr	r1, [pc, #612]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002094:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020a2:	4991      	ldr	r1, [pc, #580]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020b6:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c4:	4988      	ldr	r1, [pc, #544]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020d8:	4b83      	ldr	r3, [pc, #524]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e6:	4980      	ldr	r1, [pc, #512]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020fa:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4977      	ldr	r1, [pc, #476]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800211c:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	496f      	ldr	r1, [pc, #444]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800213e:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f023 020c 	bic.w	r2, r3, #12
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	4966      	ldr	r1, [pc, #408]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	495e      	ldr	r1, [pc, #376]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002182:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002190:	4955      	ldr	r1, [pc, #340]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021a4:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	494d      	ldr	r1, [pc, #308]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021c6:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4944      	ldr	r1, [pc, #272]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	493c      	ldr	r1, [pc, #240]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	4933      	ldr	r1, [pc, #204]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800223a:	492b      	ldr	r1, [pc, #172]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d011      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800225c:	4922      	ldr	r1, [pc, #136]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800226c:	d101      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	4912      	ldr	r1, [pc, #72]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d006      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80d9 	beq.w	800248e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a01      	ldr	r2, [pc, #4]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022e6:	e001      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ee:	f7fe fcfd 	bl	8000cec <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022f6:	f7fe fcf9 	bl	8000cec <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	; 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e194      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002308:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d021      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11d      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002336:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233c:	0e1b      	lsrs	r3, r3, #24
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	019a      	lsls	r2, r3, #6
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	061b      	lsls	r3, r3, #24
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	071b      	lsls	r3, r3, #28
 800235c:	4957      	ldr	r1, [pc, #348]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02e      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238e:	d129      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002390:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002396:	0c1b      	lsrs	r3, r3, #16
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a4:	0f1b      	lsrs	r3, r3, #28
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	019a      	lsls	r2, r3, #6
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	431a      	orrs	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	071b      	lsls	r3, r3, #28
 80023c4:	493d      	ldr	r1, [pc, #244]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d2:	f023 021f 	bic.w	r2, r3, #31
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01d      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f6:	0e1b      	lsrs	r3, r3, #24
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002404:	0f1b      	lsrs	r3, r3, #28
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	019a      	lsls	r2, r3, #6
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	431a      	orrs	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	071b      	lsls	r3, r3, #28
 8002424:	4925      	ldr	r1, [pc, #148]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d011      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	019a      	lsls	r2, r3, #6
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	061b      	lsls	r3, r3, #24
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	071b      	lsls	r3, r3, #28
 8002454:	4919      	ldr	r1, [pc, #100]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a16      	ldr	r2, [pc, #88]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002468:	f7fe fc40 	bl	8000cec <HAL_GetTick>
 800246c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002470:	f7fe fc3c 	bl	8000cec <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0d7      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	f040 80cd 	bne.w	8002630 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a2:	f7fe fc23 	bl	8000cec <HAL_GetTick>
 80024a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024aa:	f7fe fc1f 	bl	8000cec <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	; 0x64
 80024b6:	d903      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0ba      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80024bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024cc:	d0ed      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02e      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d12a      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002504:	4b4d      	ldr	r3, [pc, #308]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	0f1b      	lsrs	r3, r3, #28
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	019a      	lsls	r2, r3, #6
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	4944      	ldr	r1, [pc, #272]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002538:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	493d      	ldr	r1, [pc, #244]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d022      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800255c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002560:	d11d      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002562:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	0e1b      	lsrs	r3, r3, #24
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002570:	4b32      	ldr	r3, [pc, #200]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	0f1b      	lsrs	r3, r3, #28
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	019a      	lsls	r2, r3, #6
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	071b      	lsls	r3, r3, #28
 8002596:	4929      	ldr	r1, [pc, #164]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	0e1b      	lsrs	r3, r3, #24
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	019a      	lsls	r2, r3, #6
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	071b      	lsls	r3, r3, #28
 80025de:	4917      	ldr	r1, [pc, #92]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	4911      	ldr	r1, [pc, #68]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002608:	f7fe fb70 	bl	8000cec <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002610:	f7fe fb6c 	bl	8000cec <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e007      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262e:	d1ef      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e049      	b.n	80026e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fa10 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 f970 	bl	8002964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d001      	beq.n	8002708 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e04c      	b.n	80027a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <HAL_TIM_Base_Start+0xc0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d022      	beq.n	8002760 <HAL_TIM_Base_Start+0x70>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002722:	d01d      	beq.n	8002760 <HAL_TIM_Base_Start+0x70>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <HAL_TIM_Base_Start+0xc4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d018      	beq.n	8002760 <HAL_TIM_Base_Start+0x70>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <HAL_TIM_Base_Start+0xc8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_TIM_Base_Start+0x70>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <HAL_TIM_Base_Start+0xcc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00e      	beq.n	8002760 <HAL_TIM_Base_Start+0x70>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_TIM_Base_Start+0xd0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_TIM_Base_Start+0x70>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_TIM_Base_Start+0xd4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_TIM_Base_Start+0x70>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_TIM_Base_Start+0xd8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d115      	bne.n	800278c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_TIM_Base_Start+0xdc>)
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b06      	cmp	r3, #6
 8002770:	d015      	beq.n	800279e <HAL_TIM_Base_Start+0xae>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d011      	beq.n	800279e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278a:	e008      	b.n	800279e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e000      	b.n	80027a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40000c00 	.word	0x40000c00
 80027c0:	40010400 	.word	0x40010400
 80027c4:	40014000 	.word	0x40014000
 80027c8:	40001800 	.word	0x40001800
 80027cc:	00010007 	.word	0x00010007

080027d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIM_ConfigClockSource+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0b4      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x186>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_TIM_ConfigClockSource+0x190>)
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d03e      	beq.n	80028a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	f200 8087 	bhi.w	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	f000 8086 	beq.w	8002942 <HAL_TIM_ConfigClockSource+0x172>
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	d87f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d01a      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xa6>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d87b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d050      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x11a>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d877      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d03c      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xfa>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d873      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d058      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x13a>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d86f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d064      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d86b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d060      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d867      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	2b10      	cmp	r3, #16
 8002872:	d05a      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	e062      	b.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002886:	f000 f987 	bl	8002b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
      break;
 80028a2:	e04f      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	f000 f970 	bl	8002b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c6:	609a      	str	r2, [r3, #8]
      break;
 80028c8:	e03c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 f8e4 	bl	8002aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2150      	movs	r1, #80	; 0x50
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f93d 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 80028e8:	e02c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 f903 	bl	8002b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2160      	movs	r1, #96	; 0x60
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f92d 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 8002908:	e01c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	461a      	mov	r2, r3
 8002918:	f000 f8c4 	bl	8002aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f91d 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 8002928:	e00c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 f914 	bl	8002b62 <TIM_ITRx_SetConfig>
      break;
 800293a:	e003      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e000      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	fffeff88 	.word	0xfffeff88

08002964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <TIM_Base_SetConfig+0x114>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002982:	d00f      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <TIM_Base_SetConfig+0x118>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00b      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3c      	ldr	r2, [pc, #240]	; (8002a80 <TIM_Base_SetConfig+0x11c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <TIM_Base_SetConfig+0x120>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3a      	ldr	r2, [pc, #232]	; (8002a88 <TIM_Base_SetConfig+0x124>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d108      	bne.n	80029b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <TIM_Base_SetConfig+0x114>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d027      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a2c      	ldr	r2, [pc, #176]	; (8002a7c <TIM_Base_SetConfig+0x118>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d023      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <TIM_Base_SetConfig+0x11c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01f      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <TIM_Base_SetConfig+0x120>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01b      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a29      	ldr	r2, [pc, #164]	; (8002a88 <TIM_Base_SetConfig+0x124>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d017      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <TIM_Base_SetConfig+0x128>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <TIM_Base_SetConfig+0x12c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00f      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <TIM_Base_SetConfig+0x130>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <TIM_Base_SetConfig+0x134>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <TIM_Base_SetConfig+0x138>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <TIM_Base_SetConfig+0x13c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <TIM_Base_SetConfig+0x114>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0xf8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <TIM_Base_SetConfig+0x124>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d103      	bne.n	8002a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	615a      	str	r2, [r3, #20]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40010400 	.word	0x40010400
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40014400 	.word	0x40014400
 8002a94:	40014800 	.word	0x40014800
 8002a98:	40001800 	.word	0x40001800
 8002a9c:	40001c00 	.word	0x40001c00
 8002aa0:	40002000 	.word	0x40002000

08002aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f023 0201 	bic.w	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f023 030a 	bic.w	r3, r3, #10
 8002ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b087      	sub	sp, #28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f023 0210 	bic.w	r2, r3, #16
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	031b      	lsls	r3, r3, #12
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	621a      	str	r2, [r3, #32]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f043 0307 	orr.w	r3, r3, #7
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	021a      	lsls	r2, r3, #8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	609a      	str	r2, [r3, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e06d      	b.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d022      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d01d      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d018      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d009      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a16      	ldr	r2, [pc, #88]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d10c      	bne.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40010400 	.word	0x40010400
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40001800 	.word	0x40001800

08002cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e040      	b.n	8002d88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd ff06 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fb1e 	bl	8003374 <UART_SetConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e022      	b.n	8002d88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fd76 	bl	800383c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fdfd 	bl	8003980 <UART_CheckIdleState>
 8002d86:	4603      	mov	r3, r0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0ba      	sub	sp, #232	; 0xe8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002db6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002dba:	f640 030f 	movw	r3, #2063	; 0x80f
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d115      	bne.n	8002df8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00f      	beq.n	8002df8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8297 	beq.w	800331c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
      }
      return;
 8002df6:	e291      	b.n	800331c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8117 	beq.w	8003030 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e12:	4b85      	ldr	r3, [pc, #532]	; (8003028 <HAL_UART_IRQHandler+0x298>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 810a 	beq.w	8003030 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d011      	beq.n	8002e4c <HAL_UART_IRQHandler+0xbc>
 8002e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d011      	beq.n	8002e7c <HAL_UART_IRQHandler+0xec>
 8002e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00b      	beq.n	8002e7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e72:	f043 0204 	orr.w	r2, r3, #4
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d011      	beq.n	8002eac <HAL_UART_IRQHandler+0x11c>
 8002e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ede:	f043 0208 	orr.w	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <HAL_UART_IRQHandler+0x18a>
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 81fd 	beq.w	8003320 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d005      	beq.n	8002f72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d04f      	beq.n	8003012 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fe01 	bl	8003b7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d141      	bne.n	800300a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3308      	adds	r3, #8
 8002fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1d9      	bne.n	8002f86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	4a13      	ldr	r2, [pc, #76]	; (800302c <HAL_UART_IRQHandler+0x29c>)
 8002fe0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe f80d 	bl	8001006 <HAL_DMA_Abort_IT>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d017      	beq.n	8003022 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	e00f      	b.n	8003022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f9a0 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00b      	b.n	8003022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f99c 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e007      	b.n	8003022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f998 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003020:	e17e      	b.n	8003320 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003022:	bf00      	nop
    return;
 8003024:	e17c      	b.n	8003320 <HAL_UART_IRQHandler+0x590>
 8003026:	bf00      	nop
 8003028:	04000120 	.word	0x04000120
 800302c:	08003c43 	.word	0x08003c43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	2b01      	cmp	r3, #1
 8003036:	f040 814c 	bne.w	80032d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8145 	beq.w	80032d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 813e 	beq.w	80032d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2210      	movs	r2, #16
 800305c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	f040 80b6 	bne.w	80031da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800307a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8150 	beq.w	8003324 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800308a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800308e:	429a      	cmp	r2, r3
 8003090:	f080 8148 	bcs.w	8003324 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800309a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a8:	f000 8086 	beq.w	80031b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1da      	bne.n	80030ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3308      	adds	r3, #8
 80030fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3308      	adds	r3, #8
 8003116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800311a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800311e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003120:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800312c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e1      	bne.n	80030f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3308      	adds	r3, #8
 8003138:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3308      	adds	r3, #8
 8003152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003156:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800315c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e3      	bne.n	8003132 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003188:	f023 0310 	bic.w	r3, r3, #16
 800318c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800319a:	65bb      	str	r3, [r7, #88]	; 0x58
 800319c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e4      	bne.n	8003178 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd feb7 	bl	8000f26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8c2 	bl	800335c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031d8:	e0a4      	b.n	8003324 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8096 	beq.w	8003328 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80031fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8091 	beq.w	8003328 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800321a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
 800322a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800322e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e4      	bne.n	8003206 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	e853 3f00 	ldrex	r3, [r3]
 800324a:	623b      	str	r3, [r7, #32]
   return(result);
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3308      	adds	r3, #8
 800325c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003260:	633a      	str	r2, [r7, #48]	; 0x30
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e3      	bne.n	800323c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	60fb      	str	r3, [r7, #12]
   return(result);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f023 0310 	bic.w	r3, r3, #16
 800329c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	617b      	str	r3, [r7, #20]
   return(result);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e4      	bne.n	8003288 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f846 	bl	800335c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032d0:	e02a      	b.n	8003328 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00e      	beq.n	80032fc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01c      	beq.n	800332c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
    }
    return;
 80032fa:	e017      	b.n	800332c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d012      	beq.n	800332e <HAL_UART_IRQHandler+0x59e>
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00c      	beq.n	800332e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fcaa 	bl	8003c6e <UART_EndTransmit_IT>
    return;
 800331a:	e008      	b.n	800332e <HAL_UART_IRQHandler+0x59e>
      return;
 800331c:	bf00      	nop
 800331e:	e006      	b.n	800332e <HAL_UART_IRQHandler+0x59e>
    return;
 8003320:	bf00      	nop
 8003322:	e004      	b.n	800332e <HAL_UART_IRQHandler+0x59e>
      return;
 8003324:	bf00      	nop
 8003326:	e002      	b.n	800332e <HAL_UART_IRQHandler+0x59e>
      return;
 8003328:	bf00      	nop
 800332a:	e000      	b.n	800332e <HAL_UART_IRQHandler+0x59e>
    return;
 800332c:	bf00      	nop
  }

}
 800332e:	37e8      	adds	r7, #232	; 0xe8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4ba6      	ldr	r3, [pc, #664]	; (8003638 <UART_SetConfig+0x2c4>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	6979      	ldr	r1, [r7, #20]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a94      	ldr	r2, [pc, #592]	; (800363c <UART_SetConfig+0x2c8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d120      	bne.n	8003432 <UART_SetConfig+0xbe>
 80033f0:	4b93      	ldr	r3, [pc, #588]	; (8003640 <UART_SetConfig+0x2cc>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d816      	bhi.n	800342c <UART_SetConfig+0xb8>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <UART_SetConfig+0x90>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003415 	.word	0x08003415
 8003408:	08003421 	.word	0x08003421
 800340c:	0800341b 	.word	0x0800341b
 8003410:	08003427 	.word	0x08003427
 8003414:	2301      	movs	r3, #1
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e150      	b.n	80036bc <UART_SetConfig+0x348>
 800341a:	2302      	movs	r3, #2
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e14d      	b.n	80036bc <UART_SetConfig+0x348>
 8003420:	2304      	movs	r3, #4
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e14a      	b.n	80036bc <UART_SetConfig+0x348>
 8003426:	2308      	movs	r3, #8
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e147      	b.n	80036bc <UART_SetConfig+0x348>
 800342c:	2310      	movs	r3, #16
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e144      	b.n	80036bc <UART_SetConfig+0x348>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a83      	ldr	r2, [pc, #524]	; (8003644 <UART_SetConfig+0x2d0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d132      	bne.n	80034a2 <UART_SetConfig+0x12e>
 800343c:	4b80      	ldr	r3, [pc, #512]	; (8003640 <UART_SetConfig+0x2cc>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d828      	bhi.n	800349c <UART_SetConfig+0x128>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <UART_SetConfig+0xdc>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003485 	.word	0x08003485
 8003454:	0800349d 	.word	0x0800349d
 8003458:	0800349d 	.word	0x0800349d
 800345c:	0800349d 	.word	0x0800349d
 8003460:	08003491 	.word	0x08003491
 8003464:	0800349d 	.word	0x0800349d
 8003468:	0800349d 	.word	0x0800349d
 800346c:	0800349d 	.word	0x0800349d
 8003470:	0800348b 	.word	0x0800348b
 8003474:	0800349d 	.word	0x0800349d
 8003478:	0800349d 	.word	0x0800349d
 800347c:	0800349d 	.word	0x0800349d
 8003480:	08003497 	.word	0x08003497
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e118      	b.n	80036bc <UART_SetConfig+0x348>
 800348a:	2302      	movs	r3, #2
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e115      	b.n	80036bc <UART_SetConfig+0x348>
 8003490:	2304      	movs	r3, #4
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e112      	b.n	80036bc <UART_SetConfig+0x348>
 8003496:	2308      	movs	r3, #8
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e10f      	b.n	80036bc <UART_SetConfig+0x348>
 800349c:	2310      	movs	r3, #16
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e10c      	b.n	80036bc <UART_SetConfig+0x348>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a68      	ldr	r2, [pc, #416]	; (8003648 <UART_SetConfig+0x2d4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d120      	bne.n	80034ee <UART_SetConfig+0x17a>
 80034ac:	4b64      	ldr	r3, [pc, #400]	; (8003640 <UART_SetConfig+0x2cc>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034b6:	2b30      	cmp	r3, #48	; 0x30
 80034b8:	d013      	beq.n	80034e2 <UART_SetConfig+0x16e>
 80034ba:	2b30      	cmp	r3, #48	; 0x30
 80034bc:	d814      	bhi.n	80034e8 <UART_SetConfig+0x174>
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d009      	beq.n	80034d6 <UART_SetConfig+0x162>
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d810      	bhi.n	80034e8 <UART_SetConfig+0x174>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <UART_SetConfig+0x15c>
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d006      	beq.n	80034dc <UART_SetConfig+0x168>
 80034ce:	e00b      	b.n	80034e8 <UART_SetConfig+0x174>
 80034d0:	2300      	movs	r3, #0
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e0f2      	b.n	80036bc <UART_SetConfig+0x348>
 80034d6:	2302      	movs	r3, #2
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e0ef      	b.n	80036bc <UART_SetConfig+0x348>
 80034dc:	2304      	movs	r3, #4
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e0ec      	b.n	80036bc <UART_SetConfig+0x348>
 80034e2:	2308      	movs	r3, #8
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e0e9      	b.n	80036bc <UART_SetConfig+0x348>
 80034e8:	2310      	movs	r3, #16
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e0e6      	b.n	80036bc <UART_SetConfig+0x348>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a56      	ldr	r2, [pc, #344]	; (800364c <UART_SetConfig+0x2d8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d120      	bne.n	800353a <UART_SetConfig+0x1c6>
 80034f8:	4b51      	ldr	r3, [pc, #324]	; (8003640 <UART_SetConfig+0x2cc>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003502:	2bc0      	cmp	r3, #192	; 0xc0
 8003504:	d013      	beq.n	800352e <UART_SetConfig+0x1ba>
 8003506:	2bc0      	cmp	r3, #192	; 0xc0
 8003508:	d814      	bhi.n	8003534 <UART_SetConfig+0x1c0>
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d009      	beq.n	8003522 <UART_SetConfig+0x1ae>
 800350e:	2b80      	cmp	r3, #128	; 0x80
 8003510:	d810      	bhi.n	8003534 <UART_SetConfig+0x1c0>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <UART_SetConfig+0x1a8>
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d006      	beq.n	8003528 <UART_SetConfig+0x1b4>
 800351a:	e00b      	b.n	8003534 <UART_SetConfig+0x1c0>
 800351c:	2300      	movs	r3, #0
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e0cc      	b.n	80036bc <UART_SetConfig+0x348>
 8003522:	2302      	movs	r3, #2
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e0c9      	b.n	80036bc <UART_SetConfig+0x348>
 8003528:	2304      	movs	r3, #4
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e0c6      	b.n	80036bc <UART_SetConfig+0x348>
 800352e:	2308      	movs	r3, #8
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e0c3      	b.n	80036bc <UART_SetConfig+0x348>
 8003534:	2310      	movs	r3, #16
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e0c0      	b.n	80036bc <UART_SetConfig+0x348>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a44      	ldr	r2, [pc, #272]	; (8003650 <UART_SetConfig+0x2dc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d125      	bne.n	8003590 <UART_SetConfig+0x21c>
 8003544:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <UART_SetConfig+0x2cc>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003552:	d017      	beq.n	8003584 <UART_SetConfig+0x210>
 8003554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003558:	d817      	bhi.n	800358a <UART_SetConfig+0x216>
 800355a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355e:	d00b      	beq.n	8003578 <UART_SetConfig+0x204>
 8003560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003564:	d811      	bhi.n	800358a <UART_SetConfig+0x216>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <UART_SetConfig+0x1fe>
 800356a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356e:	d006      	beq.n	800357e <UART_SetConfig+0x20a>
 8003570:	e00b      	b.n	800358a <UART_SetConfig+0x216>
 8003572:	2300      	movs	r3, #0
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e0a1      	b.n	80036bc <UART_SetConfig+0x348>
 8003578:	2302      	movs	r3, #2
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e09e      	b.n	80036bc <UART_SetConfig+0x348>
 800357e:	2304      	movs	r3, #4
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e09b      	b.n	80036bc <UART_SetConfig+0x348>
 8003584:	2308      	movs	r3, #8
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e098      	b.n	80036bc <UART_SetConfig+0x348>
 800358a:	2310      	movs	r3, #16
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e095      	b.n	80036bc <UART_SetConfig+0x348>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <UART_SetConfig+0x2e0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d125      	bne.n	80035e6 <UART_SetConfig+0x272>
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <UART_SetConfig+0x2cc>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a8:	d017      	beq.n	80035da <UART_SetConfig+0x266>
 80035aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ae:	d817      	bhi.n	80035e0 <UART_SetConfig+0x26c>
 80035b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b4:	d00b      	beq.n	80035ce <UART_SetConfig+0x25a>
 80035b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ba:	d811      	bhi.n	80035e0 <UART_SetConfig+0x26c>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <UART_SetConfig+0x254>
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c4:	d006      	beq.n	80035d4 <UART_SetConfig+0x260>
 80035c6:	e00b      	b.n	80035e0 <UART_SetConfig+0x26c>
 80035c8:	2301      	movs	r3, #1
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e076      	b.n	80036bc <UART_SetConfig+0x348>
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e073      	b.n	80036bc <UART_SetConfig+0x348>
 80035d4:	2304      	movs	r3, #4
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e070      	b.n	80036bc <UART_SetConfig+0x348>
 80035da:	2308      	movs	r3, #8
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e06d      	b.n	80036bc <UART_SetConfig+0x348>
 80035e0:	2310      	movs	r3, #16
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e06a      	b.n	80036bc <UART_SetConfig+0x348>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <UART_SetConfig+0x2e4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d138      	bne.n	8003662 <UART_SetConfig+0x2ee>
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <UART_SetConfig+0x2cc>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035fe:	d017      	beq.n	8003630 <UART_SetConfig+0x2bc>
 8003600:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003604:	d82a      	bhi.n	800365c <UART_SetConfig+0x2e8>
 8003606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360a:	d00b      	beq.n	8003624 <UART_SetConfig+0x2b0>
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003610:	d824      	bhi.n	800365c <UART_SetConfig+0x2e8>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <UART_SetConfig+0x2aa>
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	d006      	beq.n	800362a <UART_SetConfig+0x2b6>
 800361c:	e01e      	b.n	800365c <UART_SetConfig+0x2e8>
 800361e:	2300      	movs	r3, #0
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e04b      	b.n	80036bc <UART_SetConfig+0x348>
 8003624:	2302      	movs	r3, #2
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e048      	b.n	80036bc <UART_SetConfig+0x348>
 800362a:	2304      	movs	r3, #4
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e045      	b.n	80036bc <UART_SetConfig+0x348>
 8003630:	2308      	movs	r3, #8
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e042      	b.n	80036bc <UART_SetConfig+0x348>
 8003636:	bf00      	nop
 8003638:	efff69f3 	.word	0xefff69f3
 800363c:	40011000 	.word	0x40011000
 8003640:	40023800 	.word	0x40023800
 8003644:	40004400 	.word	0x40004400
 8003648:	40004800 	.word	0x40004800
 800364c:	40004c00 	.word	0x40004c00
 8003650:	40005000 	.word	0x40005000
 8003654:	40011400 	.word	0x40011400
 8003658:	40007800 	.word	0x40007800
 800365c:	2310      	movs	r3, #16
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e02c      	b.n	80036bc <UART_SetConfig+0x348>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a72      	ldr	r2, [pc, #456]	; (8003830 <UART_SetConfig+0x4bc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d125      	bne.n	80036b8 <UART_SetConfig+0x344>
 800366c:	4b71      	ldr	r3, [pc, #452]	; (8003834 <UART_SetConfig+0x4c0>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003676:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800367a:	d017      	beq.n	80036ac <UART_SetConfig+0x338>
 800367c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003680:	d817      	bhi.n	80036b2 <UART_SetConfig+0x33e>
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003686:	d00b      	beq.n	80036a0 <UART_SetConfig+0x32c>
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	d811      	bhi.n	80036b2 <UART_SetConfig+0x33e>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <UART_SetConfig+0x326>
 8003692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003696:	d006      	beq.n	80036a6 <UART_SetConfig+0x332>
 8003698:	e00b      	b.n	80036b2 <UART_SetConfig+0x33e>
 800369a:	2300      	movs	r3, #0
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e00d      	b.n	80036bc <UART_SetConfig+0x348>
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e00a      	b.n	80036bc <UART_SetConfig+0x348>
 80036a6:	2304      	movs	r3, #4
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e007      	b.n	80036bc <UART_SetConfig+0x348>
 80036ac:	2308      	movs	r3, #8
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e004      	b.n	80036bc <UART_SetConfig+0x348>
 80036b2:	2310      	movs	r3, #16
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e001      	b.n	80036bc <UART_SetConfig+0x348>
 80036b8:	2310      	movs	r3, #16
 80036ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c4:	d15b      	bne.n	800377e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d828      	bhi.n	800371e <UART_SetConfig+0x3aa>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0x360>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	08003701 	.word	0x08003701
 80036dc:	08003709 	.word	0x08003709
 80036e0:	0800371f 	.word	0x0800371f
 80036e4:	0800370f 	.word	0x0800370f
 80036e8:	0800371f 	.word	0x0800371f
 80036ec:	0800371f 	.word	0x0800371f
 80036f0:	0800371f 	.word	0x0800371f
 80036f4:	08003717 	.word	0x08003717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f8:	f7fe fb8a 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 80036fc:	61b8      	str	r0, [r7, #24]
        break;
 80036fe:	e013      	b.n	8003728 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7fe fb9a 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 8003704:	61b8      	str	r0, [r7, #24]
        break;
 8003706:	e00f      	b.n	8003728 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003708:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <UART_SetConfig+0x4c4>)
 800370a:	61bb      	str	r3, [r7, #24]
        break;
 800370c:	e00c      	b.n	8003728 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370e:	f7fe fa6d 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8003712:	61b8      	str	r0, [r7, #24]
        break;
 8003714:	e008      	b.n	8003728 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371a:	61bb      	str	r3, [r7, #24]
        break;
 800371c:	e004      	b.n	8003728 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	77bb      	strb	r3, [r7, #30]
        break;
 8003726:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d074      	beq.n	8003818 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	005a      	lsls	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b0f      	cmp	r3, #15
 8003748:	d916      	bls.n	8003778 <UART_SetConfig+0x404>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003750:	d212      	bcs.n	8003778 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f023 030f 	bic.w	r3, r3, #15
 800375a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	b29a      	uxth	r2, r3
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	4313      	orrs	r3, r2
 800376c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	89fa      	ldrh	r2, [r7, #14]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	e04f      	b.n	8003818 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	77bb      	strb	r3, [r7, #30]
 800377c:	e04c      	b.n	8003818 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800377e:	7ffb      	ldrb	r3, [r7, #31]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d828      	bhi.n	80037d6 <UART_SetConfig+0x462>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <UART_SetConfig+0x418>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037b9 	.word	0x080037b9
 8003794:	080037c1 	.word	0x080037c1
 8003798:	080037d7 	.word	0x080037d7
 800379c:	080037c7 	.word	0x080037c7
 80037a0:	080037d7 	.word	0x080037d7
 80037a4:	080037d7 	.word	0x080037d7
 80037a8:	080037d7 	.word	0x080037d7
 80037ac:	080037cf 	.word	0x080037cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7fe fb2e 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 80037b4:	61b8      	str	r0, [r7, #24]
        break;
 80037b6:	e013      	b.n	80037e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b8:	f7fe fb3e 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 80037bc:	61b8      	str	r0, [r7, #24]
        break;
 80037be:	e00f      	b.n	80037e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <UART_SetConfig+0x4c4>)
 80037c2:	61bb      	str	r3, [r7, #24]
        break;
 80037c4:	e00c      	b.n	80037e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c6:	f7fe fa11 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 80037ca:	61b8      	str	r0, [r7, #24]
        break;
 80037cc:	e008      	b.n	80037e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d2:	61bb      	str	r3, [r7, #24]
        break;
 80037d4:	e004      	b.n	80037e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	77bb      	strb	r3, [r7, #30]
        break;
 80037de:	bf00      	nop
    }

    if (pclk != 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085a      	lsrs	r2, r3, #1
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d909      	bls.n	8003814 <UART_SetConfig+0x4a0>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d205      	bcs.n	8003814 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	e001      	b.n	8003818 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003824:	7fbb      	ldrb	r3, [r7, #30]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40007c00 	.word	0x40007c00
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400

0800383c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01a      	beq.n	8003952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393a:	d10a      	bne.n	8003952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003990:	f7fd f9ac 	bl	8000cec <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d10e      	bne.n	80039c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f81b 	bl	80039ee <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e011      	b.n	80039e6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b09c      	sub	sp, #112	; 0x70
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fe:	e0a7      	b.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	f000 80a3 	beq.w	8003b50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fd f96f 	bl	8000cec <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d13f      	bne.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a34:	667b      	str	r3, [r7, #100]	; 0x64
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e6      	bne.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	663b      	str	r3, [r7, #96]	; 0x60
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3308      	adds	r3, #8
 8003a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e5      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e068      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d050      	beq.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003abc:	d148      	bne.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ac6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e6      	bne.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3308      	adds	r3, #8
 8003b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b1a:	623a      	str	r2, [r7, #32]
 8003b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	69f9      	ldr	r1, [r7, #28]
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e5      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e010      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	f43f af48 	beq.w	8003a00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3770      	adds	r7, #112	; 0x70
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b095      	sub	sp, #84	; 0x54
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d118      	bne.n	8003c22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 0310 	bic.w	r3, r3, #16
 8003c04:	647b      	str	r3, [r7, #68]	; 0x44
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6979      	ldr	r1, [r7, #20]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e6      	bne.n	8003bf0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c36:	bf00      	nop
 8003c38:	3754      	adds	r7, #84	; 0x54
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff fb71 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b088      	sub	sp, #32
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fb3d 	bl	8003334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cba:	bf00      	nop
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <memset>:
 8003cc2:	4402      	add	r2, r0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d100      	bne.n	8003ccc <memset+0xa>
 8003cca:	4770      	bx	lr
 8003ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd0:	e7f9      	b.n	8003cc6 <memset+0x4>
	...

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	; (8003d0c <__libc_init_array+0x38>)
 8003cd8:	4c0d      	ldr	r4, [pc, #52]	; (8003d10 <__libc_init_array+0x3c>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	; (8003d14 <__libc_init_array+0x40>)
 8003ce6:	4c0c      	ldr	r4, [pc, #48]	; (8003d18 <__libc_init_array+0x44>)
 8003ce8:	f000 f818 	bl	8003d1c <_init>
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	08003d54 	.word	0x08003d54
 8003d10:	08003d54 	.word	0x08003d54
 8003d14:	08003d54 	.word	0x08003d54
 8003d18:	08003d58 	.word	0x08003d58

08003d1c <_init>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr

08003d28 <_fini>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr
