
L03_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  08004b20  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08004b20  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e7b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253e  00000000  00000000  00030f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00033488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b08  00000000  00000000  000342b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026543  00000000  00000000  00034dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001282a  00000000  00000000  0005b303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efd8e  00000000  00000000  0006db2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c1c  00000000  00000000  0015d8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001614d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004980 	.word	0x08004980

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	08004980 	.word	0x08004980

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4bb3      	ldr	r3, [pc, #716]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4ab2      	ldr	r2, [pc, #712]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4bb0      	ldr	r3, [pc, #704]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	623b      	str	r3, [r7, #32]
 8000530:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4bad      	ldr	r3, [pc, #692]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4aac      	ldr	r2, [pc, #688]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4baa      	ldr	r3, [pc, #680]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4ba7      	ldr	r3, [pc, #668]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4aa6      	ldr	r2, [pc, #664]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4ba4      	ldr	r3, [pc, #656]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	61bb      	str	r3, [r7, #24]
 8000560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4ba1      	ldr	r3, [pc, #644]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4aa0      	ldr	r2, [pc, #640]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b9e      	ldr	r3, [pc, #632]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057a:	4b9b      	ldr	r3, [pc, #620]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a9a      	ldr	r2, [pc, #616]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000580:	f043 0320 	orr.w	r3, r3, #32
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b98      	ldr	r3, [pc, #608]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0320 	and.w	r3, r3, #32
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	4b95      	ldr	r3, [pc, #596]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a94      	ldr	r2, [pc, #592]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b92      	ldr	r3, [pc, #584]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	4b8f      	ldr	r3, [pc, #572]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a8e      	ldr	r2, [pc, #568]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b8c      	ldr	r3, [pc, #560]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005c2:	4b89      	ldr	r3, [pc, #548]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a88      	ldr	r2, [pc, #544]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 80005c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b86      	ldr	r3, [pc, #536]	; (80007e8 <MX_GPIO_Init+0x2e4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCILLOSCOPE_OUT2_GPIO_Port, OSCILLOSCOPE_OUT2_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2101      	movs	r1, #1
 80005de:	4883      	ldr	r0, [pc, #524]	; (80007ec <MX_GPIO_Init+0x2e8>)
 80005e0:	f000 ffde 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCILLOSCOPE_OUT1_GPIO_Port, OSCILLOSCOPE_OUT1_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4881      	ldr	r0, [pc, #516]	; (80007f0 <MX_GPIO_Init+0x2ec>)
 80005ea:	f000 ffd9 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	487f      	ldr	r0, [pc, #508]	; (80007f4 <MX_GPIO_Init+0x2f0>)
 80005f6:	f000 ffd3 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	487d      	ldr	r0, [pc, #500]	; (80007f8 <MX_GPIO_Init+0x2f4>)
 8000602:	f000 ffcd 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f244 2140 	movw	r1, #16960	; 0x4240
 800060c:	487b      	ldr	r0, [pc, #492]	; (80007fc <MX_GPIO_Init+0x2f8>)
 800060e:	f000 ffc7 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000618:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000626:	4619      	mov	r1, r3
 8000628:	4870      	ldr	r0, [pc, #448]	; (80007ec <MX_GPIO_Init+0x2e8>)
 800062a:	f000 fe0d 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCILLOSCOPE_OUT2_Pin;
 800062e:	2301      	movs	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OSCILLOSCOPE_OUT2_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	4619      	mov	r1, r3
 8000644:	4869      	ldr	r0, [pc, #420]	; (80007ec <MX_GPIO_Init+0x2e8>)
 8000646:	f000 fdff 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800064a:	2332      	movs	r3, #50	; 0x32
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800065a:	230b      	movs	r3, #11
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000662:	4619      	mov	r1, r3
 8000664:	4861      	ldr	r0, [pc, #388]	; (80007ec <MX_GPIO_Init+0x2e8>)
 8000666:	f000 fdef 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800066a:	2386      	movs	r3, #134	; 0x86
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800067a:	230b      	movs	r3, #11
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000682:	4619      	mov	r1, r3
 8000684:	485a      	ldr	r0, [pc, #360]	; (80007f0 <MX_GPIO_Init+0x2ec>)
 8000686:	f000 fddf 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCILLOSCOPE_OUT1_Pin;
 800068a:	2308      	movs	r3, #8
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OSCILLOSCOPE_OUT1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4619      	mov	r1, r3
 80006a0:	4853      	ldr	r0, [pc, #332]	; (80007f0 <MX_GPIO_Init+0x2ec>)
 80006a2:	f000 fdd1 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006a6:	f244 0381 	movw	r3, #16513	; 0x4081
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	484d      	ldr	r0, [pc, #308]	; (80007f4 <MX_GPIO_Init+0x2f0>)
 80006c0:	f000 fdc2 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 80006c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	4619      	mov	r1, r3
 80006da:	4847      	ldr	r0, [pc, #284]	; (80007f8 <MX_GPIO_Init+0x2f4>)
 80006dc:	f000 fdb4 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD6_Pin;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	4619      	mov	r1, r3
 80006f8:	483f      	ldr	r0, [pc, #252]	; (80007f8 <MX_GPIO_Init+0x2f4>)
 80006fa:	f000 fda5 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 80006fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000704:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800070a:	2302      	movs	r3, #2
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	4619      	mov	r1, r3
 8000714:	483a      	ldr	r0, [pc, #232]	; (8000800 <MX_GPIO_Init+0x2fc>)
 8000716:	f000 fd97 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072c:	230b      	movs	r3, #11
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	482f      	ldr	r0, [pc, #188]	; (80007f4 <MX_GPIO_Init+0x2f0>)
 8000738:	f000 fd86 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 800073c:	f244 2340 	movw	r3, #16960	; 0x4240
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	4619      	mov	r1, r3
 8000754:	4829      	ldr	r0, [pc, #164]	; (80007fc <MX_GPIO_Init+0x2f8>)
 8000756:	f000 fd77 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	4619      	mov	r1, r3
 800076c:	4823      	ldr	r0, [pc, #140]	; (80007fc <MX_GPIO_Init+0x2f8>)
 800076e:	f000 fd6b 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000772:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000784:	230a      	movs	r3, #10
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4818      	ldr	r0, [pc, #96]	; (80007f0 <MX_GPIO_Init+0x2ec>)
 8000790:	f000 fd5a 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	4619      	mov	r1, r3
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0x2ec>)
 80007aa:	f000 fd4d 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c0:	230b      	movs	r3, #11
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_GPIO_Init+0x2f8>)
 80007cc:	f000 fd3c 	bl	8001248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2028      	movs	r0, #40	; 0x28
 80007d6:	f000 fc6e 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007da:	2028      	movs	r0, #40	; 0x28
 80007dc:	f000 fc87 	bl	80010ee <HAL_NVIC_EnableIRQ>

}
 80007e0:	bf00      	nop
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020400 	.word	0x40020400
 80007f8:	40021400 	.word	0x40021400
 80007fc:	40021800 	.word	0x40021800
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a1a      	ldr	r2, [pc, #104]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d12d      	bne.n	8000870 <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	VarBtn = 0;   // for software tools
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(OSCILLOSCOPE_OUT2_GPIO_Port, OSCILLOSCOPE_OUT2_Pin, GPIO_PIN_RESET); // for hardware tools (oscilloscope)
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	4818      	ldr	r0, [pc, #96]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000820:	f000 febe 	bl	80015a0 <HAL_GPIO_WritePin>
	VarPulse = 1; // for software tools
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(OSCILLOSCOPE_OUT1_GPIO_Port, OSCILLOSCOPE_OUT1_Pin, GPIO_PIN_SET); // for hardware tools (oscilloscope)
 800082a:	2201      	movs	r2, #1
 800082c:	2108      	movs	r1, #8
 800082e:	4816      	ldr	r0, [pc, #88]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000830:	f000 feb6 	bl	80015a0 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start(&htim7);
 8000834:	4815      	ldr	r0, [pc, #84]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000836:	f002 f857 	bl	80028e8 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) == 0);
 800083a:	bf00      	nop
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	2b01      	cmp	r3, #1
 8000848:	d1f8      	bne.n	800083c <HAL_TIM_PeriodElapsedCallback+0x38>
    __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f06f 0201 	mvn.w	r2, #1
 8000852:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Stop(&htim7);
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000856:	f002 f8b7 	bl	80029c8 <HAL_TIM_Base_Stop>

    VarPulse = 0; // for software tools
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(OSCILLOSCOPE_OUT1_GPIO_Port, OSCILLOSCOPE_OUT1_Pin, GPIO_PIN_RESET); // for hardware tools (oscilloscope)
 8000860:	2200      	movs	r2, #0
 8000862:	2108      	movs	r1, #8
 8000864:	4808      	ldr	r0, [pc, #32]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000866:	f000 fe9b 	bl	80015a0 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Stop_IT(&htim2);
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800086c:	f002 f94c 	bl	8002b08 <HAL_TIM_Base_Stop_IT>
  }
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000084 	.word	0x20000084
 800087c:	20000078 	.word	0x20000078
 8000880:	40020800 	.word	0x40020800
 8000884:	20000079 	.word	0x20000079
 8000888:	40020000 	.word	0x40020000
 800088c:	200000d0 	.word	0x200000d0

08000890 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_UART_RxCpltCallback+0x50>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d11a      	bne.n	80008d6 <HAL_UART_RxCpltCallback+0x46>
  {
    int time_ms = strtol((char*)tx_buffer, 0, 10);
 80008a0:	220a      	movs	r2, #10
 80008a2:	2100      	movs	r1, #0
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <HAL_UART_RxCpltCallback+0x54>)
 80008a6:	f004 f82f 	bl	8004908 <strtol>
 80008aa:	60f8      	str	r0, [r7, #12]
    int tim3_arr = time_ms*1000 - 1;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	3b01      	subs	r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_AUTORELOAD(&htim2, tim3_arr);
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_UART_RxCpltCallback+0x58>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_UART_RxCpltCallback+0x58>)
 80008c6:	60d3      	str	r3, [r2, #12]

    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 80008c8:	2304      	movs	r3, #4
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4905      	ldr	r1, [pc, #20]	; (80008e4 <HAL_UART_RxCpltCallback+0x54>)
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <HAL_UART_RxCpltCallback+0x50>)
 80008d2:	f002 fd8d 	bl	80033f0 <HAL_UART_Receive_IT>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000011c 	.word	0x2000011c
 80008e4:	2000007c 	.word	0x2000007c
 80008e8:	20000084 	.word	0x20000084

080008ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_Btn_Pin)
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fc:	d10a      	bne.n	8000914 <HAL_GPIO_EXTI_Callback+0x28>
  {
	VarBtn = 1;   // for software tools
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_GPIO_EXTI_Callback+0x30>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(OSCILLOSCOPE_OUT2_GPIO_Port, OSCILLOSCOPE_OUT2_Pin, GPIO_PIN_SET); // for hardware tools (oscilloscope)
 8000904:	2201      	movs	r2, #1
 8000906:	2101      	movs	r1, #1
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_GPIO_EXTI_Callback+0x34>)
 800090a:	f000 fe49 	bl	80015a0 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_GPIO_EXTI_Callback+0x38>)
 8000910:	f002 f882 	bl	8002a18 <HAL_TIM_Base_Start_IT>
  }
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000078 	.word	0x20000078
 8000920:	40020800 	.word	0x40020800
 8000924:	20000084 	.word	0x20000084

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fa8b 	bl	8000e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f814 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f7ff fde6 	bl	8000504 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000938:	f000 f9c4 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800093c:	f000 f906 	bl	8000b4c <MX_TIM2_Init>
  MX_TIM7_Init();
 8000940:	f000 f952 	bl	8000be8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000944:	2304      	movs	r3, #4
 8000946:	b29b      	uxth	r3, r3
 8000948:	461a      	mov	r2, r3
 800094a:	4902      	ldr	r1, [pc, #8]	; (8000954 <main+0x2c>)
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <main+0x30>)
 800094e:	f002 fd4f 	bl	80033f0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x2a>
 8000954:	2000007c 	.word	0x2000007c
 8000958:	2000011c 	.word	0x2000011c

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	; 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2230      	movs	r2, #48	; 0x30
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 ffd6 	bl	800491c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000980:	f000 fe40 	bl	8001604 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <SystemClock_Config+0xd4>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a29      	ldr	r2, [pc, #164]	; (8000a30 <SystemClock_Config+0xd4>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <SystemClock_Config+0xd4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <SystemClock_Config+0xd8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <SystemClock_Config+0xd8>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <SystemClock_Config+0xd8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c8:	2304      	movs	r3, #4
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009cc:	23d8      	movs	r3, #216	; 0xd8
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009d4:	2303      	movs	r3, #3
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fe71 	bl	80016c4 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009e8:	f000 f826 	bl	8000a38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009ec:	f000 fe1a 	bl	8001624 <HAL_PWREx_EnableOverDrive>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009f6:	f000 f81f 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2302      	movs	r3, #2
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2107      	movs	r1, #7
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 f8f7 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a24:	f000 f808 	bl	8000a38 <Error_Handler>
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3750      	adds	r7, #80	; 0x50
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f9f2 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM2_IRQHandler+0x10>)
 8000ae6:	f002 f83e 	bl	8002b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000084 	.word	0x20000084

08000af4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USART3_IRQHandler+0x10>)
 8000afa:	f002 fcbd 	bl	8003478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000011c 	.word	0x2000011c

08000b08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OFF_Btn_Pin);
 8000b0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b10:	f000 fd60 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000b14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b18:	f000 fd5c 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ON_Btn_Pin);
 8000b1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b20:	f000 fd58 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000b6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000b74:	226b      	movs	r2, #107	; 0x6b
 8000b76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000b80:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000b94:	f001 fe50 	bl	8002838 <HAL_TIM_Base_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b9e:	f7ff ff4b 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000bb0:	f002 f8f8 	bl	8002da4 <HAL_TIM_ConfigClockSource>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bba:	f7ff ff3d 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_TIM2_Init+0x98>)
 8000bcc:	f002 fb16 	bl	80031fc <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bd6:	f7ff ff2f 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000084 	.word	0x20000084

08000be8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_TIM7_Init+0x64>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_TIM7_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_TIM7_Init+0x64>)
 8000c00:	226b      	movs	r2, #107	; 0x6b
 8000c02:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_TIM7_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_TIM7_Init+0x64>)
 8000c0c:	2263      	movs	r2, #99	; 0x63
 8000c0e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_TIM7_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_TIM7_Init+0x64>)
 8000c18:	f001 fe0e 	bl	8002838 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000c22:	f7ff ff09 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_TIM7_Init+0x64>)
 8000c34:	f002 fae2 	bl	80031fc <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c3e:	f7ff fefb 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000d0 	.word	0x200000d0
 8000c50:	40001400 	.word	0x40001400

08000c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d114      	bne.n	8000c90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201c      	movs	r0, #28
 8000c84:	f000 fa17 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c88:	201c      	movs	r0, #28
 8000c8a:	f000 fa30 	bl	80010ee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000c8e:	e010      	b.n	8000cb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10b      	bne.n	8000cb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000ca0:	f043 0320 	orr.w	r3, r3, #32
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40001400 	.word	0x40001400

08000cc4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <MX_USART3_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000d08:	f002 fb24 	bl	8003354 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f7ff fe91 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000011c 	.word	0x2000011c
 8000d20:	40004800 	.word	0x40004800

08000d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0aa      	sub	sp, #168	; 0xa8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2284      	movs	r2, #132	; 0x84
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fde9 	bl	800491c <memset>
  if(uartHandle->Instance==USART3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d144      	bne.n	8000dde <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 f978 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6e:	f7ff fe63 	bl	8000a38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <HAL_UART_MspInit+0xc8>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_UART_MspInit+0xc8>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_UART_MspInit+0xc8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_MspInit+0xc8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_UART_MspInit+0xc8>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0xc8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_UART_MspInit+0xcc>)
 8000dca:	f000 fa3d 	bl	8001248 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2027      	movs	r0, #39	; 0x27
 8000dd4:	f000 f96f 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dd8:	2027      	movs	r0, #39	; 0x27
 8000dda:	f000 f988 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	37a8      	adds	r7, #168	; 0xa8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004800 	.word	0x40004800
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020c00 	.word	0x40020c00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff fe83 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f003 fd89 	bl	8004938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fd7f 	bl	8000928 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e38:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8000e3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e40:	200002e0 	.word	0x200002e0

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>

08000e46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 f928 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f805 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e56:	f7ff fdf5 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f943 	bl	800110a <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f90b 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200001a4 	.word	0x200001a4

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200001a4 	.word	0x200001a4

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	05fa0000 	.word	0x05fa0000

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff feda 	bl	8000ee8 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d008      	beq.n	8001154 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e052      	b.n	80011fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0216 	bic.w	r2, r2, #22
 8001162:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001172:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <HAL_DMA_Abort+0x62>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0208 	bic.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a4:	e013      	b.n	80011ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a6:	f7ff fe9f 	bl	8000ee8 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d90c      	bls.n	80011ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2220      	movs	r2, #32
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e015      	b.n	80011fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e4      	bne.n	80011a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	223f      	movs	r2, #63	; 0x3f
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d004      	beq.n	8001220 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00c      	b.n	800123a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2205      	movs	r2, #5
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e175      	b.n	8001554 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8164 	bne.w	800154e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x56>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80be 	beq.w	800154e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b66      	ldr	r3, [pc, #408]	; (800156c <HAL_GPIO_Init+0x324>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a65      	ldr	r2, [pc, #404]	; (800156c <HAL_GPIO_Init+0x324>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b63      	ldr	r3, [pc, #396]	; (800156c <HAL_GPIO_Init+0x324>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013ea:	4a61      	ldr	r2, [pc, #388]	; (8001570 <HAL_GPIO_Init+0x328>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_GPIO_Init+0x32c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d037      	beq.n	8001486 <HAL_GPIO_Init+0x23e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a57      	ldr	r2, [pc, #348]	; (8001578 <HAL_GPIO_Init+0x330>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d031      	beq.n	8001482 <HAL_GPIO_Init+0x23a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a56      	ldr	r2, [pc, #344]	; (800157c <HAL_GPIO_Init+0x334>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x236>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a55      	ldr	r2, [pc, #340]	; (8001580 <HAL_GPIO_Init+0x338>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x232>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a54      	ldr	r2, [pc, #336]	; (8001584 <HAL_GPIO_Init+0x33c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x22e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a53      	ldr	r2, [pc, #332]	; (8001588 <HAL_GPIO_Init+0x340>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x22a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_GPIO_Init+0x344>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x226>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a51      	ldr	r2, [pc, #324]	; (8001590 <HAL_GPIO_Init+0x348>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x222>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a50      	ldr	r2, [pc, #320]	; (8001594 <HAL_GPIO_Init+0x34c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x21e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4f      	ldr	r2, [pc, #316]	; (8001598 <HAL_GPIO_Init+0x350>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x21a>
 800145e:	2309      	movs	r3, #9
 8001460:	e012      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001462:	230a      	movs	r3, #10
 8001464:	e010      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001466:	2308      	movs	r3, #8
 8001468:	e00e      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800146a:	2307      	movs	r3, #7
 800146c:	e00c      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800146e:	2306      	movs	r3, #6
 8001470:	e00a      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001472:	2305      	movs	r3, #5
 8001474:	e008      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001476:	2304      	movs	r3, #4
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800147a:	2303      	movs	r3, #3
 800147c:	e004      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800147e:	2302      	movs	r3, #2
 8001480:	e002      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001486:	2300      	movs	r3, #0
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	f002 0203 	and.w	r2, r2, #3
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	4093      	lsls	r3, r2
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001498:	4935      	ldr	r1, [pc, #212]	; (8001570 <HAL_GPIO_Init+0x328>)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b3d      	ldr	r3, [pc, #244]	; (800159c <HAL_GPIO_Init+0x354>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a34      	ldr	r2, [pc, #208]	; (800159c <HAL_GPIO_Init+0x354>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_GPIO_Init+0x354>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a29      	ldr	r2, [pc, #164]	; (800159c <HAL_GPIO_Init+0x354>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_GPIO_Init+0x354>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_GPIO_Init+0x354>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_GPIO_Init+0x354>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001548:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_GPIO_Init+0x354>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3301      	adds	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	f67f ae86 	bls.w	8001268 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40021000 	.word	0x40021000
 8001588:	40021400 	.word	0x40021400
 800158c:	40021800 	.word	0x40021800
 8001590:	40021c00 	.word	0x40021c00
 8001594:	40022000 	.word	0x40022000
 8001598:	40022400 	.word	0x40022400
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f97a 	bl	80008ec <HAL_GPIO_EXTI_Callback>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40007000 	.word	0x40007000

08001624 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001652:	f7ff fc49 	bl	8000ee8 <HAL_GetTick>
 8001656:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001658:	e009      	b.n	800166e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800165a:	f7ff fc45 	bl	8000ee8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001668:	d901      	bls.n	800166e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e022      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d1ee      	bne.n	800165a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001686:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001688:	f7ff fc2e 	bl	8000ee8 <HAL_GetTick>
 800168c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800168e:	e009      	b.n	80016a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001690:	f7ff fc2a 	bl	8000ee8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169e:	d901      	bls.n	80016a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e007      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016b0:	d1ee      	bne.n	8001690 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e291      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8087 	beq.w	80017f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e8:	4b96      	ldr	r3, [pc, #600]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d00c      	beq.n	800170e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f4:	4b93      	ldr	r3, [pc, #588]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d112      	bne.n	8001726 <HAL_RCC_OscConfig+0x62>
 8001700:	4b90      	ldr	r3, [pc, #576]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170c:	d10b      	bne.n	8001726 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4b8d      	ldr	r3, [pc, #564]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d06c      	beq.n	80017f4 <HAL_RCC_OscConfig+0x130>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d168      	bne.n	80017f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e26b      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x7a>
 8001730:	4b84      	ldr	r3, [pc, #528]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a83      	ldr	r2, [pc, #524]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e02e      	b.n	800179c <HAL_RCC_OscConfig+0xd8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x9c>
 8001746:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7e      	ldr	r2, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b7c      	ldr	r3, [pc, #496]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a7b      	ldr	r2, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e01d      	b.n	800179c <HAL_RCC_OscConfig+0xd8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0xc0>
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a72      	ldr	r2, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0xd8>
 8001784:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800178a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a6b      	ldr	r2, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fba0 	bl	8000ee8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fb9c 	bl	8000ee8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e21f      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb8c 	bl	8000ee8 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb88 	bl	8000ee8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e20b      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	4b57      	ldr	r3, [pc, #348]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x110>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d069      	beq.n	80018d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d11c      	bne.n	8001854 <HAL_RCC_OscConfig+0x190>
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d116      	bne.n	8001854 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_RCC_OscConfig+0x17a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1df      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	493d      	ldr	r1, [pc, #244]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e040      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d023      	beq.n	80018a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a38      	ldr	r2, [pc, #224]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fb3e 	bl	8000ee8 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff fb3a 	bl	8000ee8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1bd      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4929      	ldr	r1, [pc, #164]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
 80018a2:	e018      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb1a 	bl	8000ee8 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb16 	bl	8000ee8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e199      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d038      	beq.n	8001954 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d019      	beq.n	800191e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff faf7 	bl	8000ee8 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff faf3 	bl	8000ee8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e176      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x23a>
 800191c:	e01a      	b.n	8001954 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff fadd 	bl	8000ee8 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fad9 	bl	8000ee8 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d903      	bls.n	8001948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e15c      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
 8001944:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b91      	ldr	r3, [pc, #580]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 800194a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ee      	bne.n	8001932 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a4 	beq.w	8001aaa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b8b      	ldr	r3, [pc, #556]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10d      	bne.n	800198a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a87      	ldr	r2, [pc, #540]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b85      	ldr	r3, [pc, #532]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198a:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001996:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7e      	ldr	r2, [pc, #504]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff faa1 	bl	8000ee8 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fa9d 	bl	8000ee8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e120      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x31a>
 80019d0:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	e02d      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x33c>
 80019e6:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a69      	ldr	r2, [pc, #420]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	e01c      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x35e>
 8001a08:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a60      	ldr	r2, [pc, #384]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	e00b      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
 8001a22:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a5a      	ldr	r2, [pc, #360]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff fa51 	bl	8000ee8 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fa4d 	bl	8000ee8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0ce      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	4b4b      	ldr	r3, [pc, #300]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ee      	beq.n	8001a4a <HAL_RCC_OscConfig+0x386>
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fa3b 	bl	8000ee8 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fa37 	bl	8000ee8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0b8      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ee      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a3b      	ldr	r2, [pc, #236]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a4 	beq.w	8001bfc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d06b      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d149      	bne.n	8001b5c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fa08 	bl	8000ee8 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fa04 	bl	8000ee8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e087      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b26:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f9d8 	bl	8000ee8 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f9d4 	bl	8000ee8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e057      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x478>
 8001b5a:	e04f      	b.n	8001bfc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f9be 	bl	8000ee8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f9ba 	bl	8000ee8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e03d      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4ac>
 8001b8e:	e035      	b.n	8001bfc <HAL_RCC_OscConfig+0x538>
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x544>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d028      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d121      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc8:	4013      	ands	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0d0      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d910      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 020f 	bic.w	r2, r3, #15
 8001c3a:	4965      	ldr	r1, [pc, #404]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	494d      	ldr	r1, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d040      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e073      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06b      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d00:	f7ff f8f2 	bl	8000ee8 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff f8ee 	bl	8000ee8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e053      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d210      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 020f 	bic.w	r2, r3, #15
 8001d46:	4922      	ldr	r1, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e032      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4916      	ldr	r1, [pc, #88]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9e:	f000 f821 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	490a      	ldr	r1, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001db0:	5ccb      	ldrb	r3, [r1, r3]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1d0>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1d4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f84e 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	08004998 	.word	0x08004998
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b094      	sub	sp, #80	; 0x50
 8001dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44
 8001df0:	2300      	movs	r3, #0
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df4:	2300      	movs	r3, #0
 8001df6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d00d      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x40>
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	f200 80e1 	bhi.w	8001fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e16:	e0db      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1c:	e0db      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCC_GetSysClockFreq+0x208>)
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e22:	e0d8      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e2c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3a:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	2200      	movs	r2, #0
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e56:	4622      	mov	r2, r4
 8001e58:	462b      	mov	r3, r5
 8001e5a:	f04f 0000 	mov.w	r0, #0
 8001e5e:	f04f 0100 	mov.w	r1, #0
 8001e62:	0159      	lsls	r1, r3, #5
 8001e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e68:	0150      	lsls	r0, r2, #5
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4621      	mov	r1, r4
 8001e70:	1a51      	subs	r1, r2, r1
 8001e72:	6139      	str	r1, [r7, #16]
 8001e74:	4629      	mov	r1, r5
 8001e76:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e88:	4659      	mov	r1, fp
 8001e8a:	018b      	lsls	r3, r1, #6
 8001e8c:	4651      	mov	r1, sl
 8001e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e92:	4651      	mov	r1, sl
 8001e94:	018a      	lsls	r2, r1, #6
 8001e96:	4651      	mov	r1, sl
 8001e98:	ebb2 0801 	subs.w	r8, r2, r1
 8001e9c:	4659      	mov	r1, fp
 8001e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eb6:	4690      	mov	r8, r2
 8001eb8:	4699      	mov	r9, r3
 8001eba:	4623      	mov	r3, r4
 8001ebc:	eb18 0303 	adds.w	r3, r8, r3
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	462b      	mov	r3, r5
 8001ec4:	eb49 0303 	adc.w	r3, r9, r3
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	024b      	lsls	r3, r1, #9
 8001eda:	4621      	mov	r1, r4
 8001edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	024a      	lsls	r2, r1, #9
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eea:	2200      	movs	r2, #0
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef4:	f7fe f988 	bl	8000208 <__aeabi_uldivmod>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4613      	mov	r3, r2
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f00:	e058      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	099b      	lsrs	r3, r3, #6
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f12:	623b      	str	r3, [r7, #32]
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
 8001f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f1c:	4642      	mov	r2, r8
 8001f1e:	464b      	mov	r3, r9
 8001f20:	f04f 0000 	mov.w	r0, #0
 8001f24:	f04f 0100 	mov.w	r1, #0
 8001f28:	0159      	lsls	r1, r3, #5
 8001f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f2e:	0150      	lsls	r0, r2, #5
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4641      	mov	r1, r8
 8001f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f54:	ebb2 040a 	subs.w	r4, r2, sl
 8001f58:	eb63 050b 	sbc.w	r5, r3, fp
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	00eb      	lsls	r3, r5, #3
 8001f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f6a:	00e2      	lsls	r2, r4, #3
 8001f6c:	4614      	mov	r4, r2
 8001f6e:	461d      	mov	r5, r3
 8001f70:	4643      	mov	r3, r8
 8001f72:	18e3      	adds	r3, r4, r3
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	464b      	mov	r3, r9
 8001f78:	eb45 0303 	adc.w	r3, r5, r3
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	028b      	lsls	r3, r1, #10
 8001f8e:	4621      	mov	r1, r4
 8001f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f94:	4621      	mov	r1, r4
 8001f96:	028a      	lsls	r2, r1, #10
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	61fa      	str	r2, [r7, #28]
 8001fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa8:	f7fe f92e 	bl	8000208 <__aeabi_uldivmod>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3750      	adds	r7, #80	; 0x50
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	00f42400 	.word	0x00f42400
 8001fec:	007a1200 	.word	0x007a1200

08001ff0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800200c:	f7ff fff0 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4903      	ldr	r1, [pc, #12]	; (800202c <HAL_RCC_GetPCLK1Freq+0x24>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	080049a8 	.word	0x080049a8

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002034:	f7ff ffdc 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0b5b      	lsrs	r3, r3, #13
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	080049a8 	.word	0x080049a8

08002058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d012      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002080:	4b69      	ldr	r3, [pc, #420]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a68      	ldr	r2, [pc, #416]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800208a:	6093      	str	r3, [r2, #8]
 800208c:	4b66      	ldr	r3, [pc, #408]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	4964      	ldr	r1, [pc, #400]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d017      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	4959      	ldr	r1, [pc, #356]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d0:	d101      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020d2:	2301      	movs	r3, #1
 80020d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020de:	2301      	movs	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d017      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ee:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	494a      	ldr	r1, [pc, #296]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210c:	d101      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 808b 	beq.w	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	4a39      	ldr	r2, [pc, #228]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002146:	6413      	str	r3, [r2, #64]	; 0x40
 8002148:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002154:	4b35      	ldr	r3, [pc, #212]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a34      	ldr	r2, [pc, #208]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002160:	f7fe fec2 	bl	8000ee8 <HAL_GetTick>
 8002164:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7fe febe 	bl	8000ee8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e357      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d035      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d02e      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d114      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe86 	bl	8000ee8 <HAL_GetTick>
 80021dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe fe82 	bl	8000ee8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e319      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ee      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800220e:	d111      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800221e:	400b      	ands	r3, r1
 8002220:	4901      	ldr	r1, [pc, #4]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
 8002226:	e00b      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000
 8002230:	0ffffcff 	.word	0x0ffffcff
 8002234:	4baa      	ldr	r3, [pc, #680]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4aa9      	ldr	r2, [pc, #676]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	4ba7      	ldr	r3, [pc, #668]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224c:	49a4      	ldr	r1, [pc, #656]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224e:	4313      	orrs	r3, r2
 8002250:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800225e:	4ba0      	ldr	r3, [pc, #640]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002264:	4a9e      	ldr	r2, [pc, #632]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800226e:	4b9c      	ldr	r3, [pc, #624]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002270:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	4999      	ldr	r1, [pc, #612]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800228c:	4b94      	ldr	r3, [pc, #592]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800229a:	4991      	ldr	r1, [pc, #580]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ae:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022bc:	4988      	ldr	r1, [pc, #544]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d0:	4b83      	ldr	r3, [pc, #524]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022de:	4980      	ldr	r1, [pc, #512]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022f2:	4b7b      	ldr	r3, [pc, #492]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	4977      	ldr	r1, [pc, #476]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002314:	4b72      	ldr	r3, [pc, #456]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	496f      	ldr	r1, [pc, #444]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002336:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f023 020c 	bic.w	r2, r3, #12
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002344:	4966      	ldr	r1, [pc, #408]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	495e      	ldr	r1, [pc, #376]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800237a:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002380:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	4955      	ldr	r1, [pc, #340]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	494d      	ldr	r1, [pc, #308]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023be:	4b48      	ldr	r3, [pc, #288]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	4944      	ldr	r1, [pc, #272]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023e0:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	493c      	ldr	r1, [pc, #240]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	4933      	ldr	r1, [pc, #204]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002432:	492b      	ldr	r1, [pc, #172]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d011      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002454:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002464:	d101      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002494:	4912      	ldr	r1, [pc, #72]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00b      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b8:	4909      	ldr	r1, [pc, #36]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d006      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80d9 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024d4:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a01      	ldr	r2, [pc, #4]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024de:	e001      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80024e0:	40023800 	.word	0x40023800
 80024e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e6:	f7fe fcff 	bl	8000ee8 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024ee:	f7fe fcfb 	bl	8000ee8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	; 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e194      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d021      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11d      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002526:	0c1b      	lsrs	r3, r3, #16
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002534:	0e1b      	lsrs	r3, r3, #24
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	019a      	lsls	r2, r3, #6
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	061b      	lsls	r3, r3, #24
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	071b      	lsls	r3, r3, #28
 8002554:	4957      	ldr	r1, [pc, #348]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02e      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002586:	d129      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002588:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800258a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259c:	0f1b      	lsrs	r3, r3, #28
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	019a      	lsls	r2, r3, #6
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	071b      	lsls	r3, r3, #28
 80025bc:	493d      	ldr	r1, [pc, #244]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ca:	f023 021f 	bic.w	r2, r3, #31
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	3b01      	subs	r3, #1
 80025d4:	4937      	ldr	r1, [pc, #220]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01d      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ee:	0e1b      	lsrs	r3, r3, #24
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fc:	0f1b      	lsrs	r3, r3, #28
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	019a      	lsls	r2, r3, #6
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	431a      	orrs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	071b      	lsls	r3, r3, #28
 800261c:	4925      	ldr	r1, [pc, #148]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d011      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	019a      	lsls	r2, r3, #6
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	071b      	lsls	r3, r3, #28
 800264c:	4919      	ldr	r1, [pc, #100]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800265a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fc42 	bl	8000ee8 <HAL_GetTick>
 8002664:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002668:	f7fe fc3e 	bl	8000ee8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0d7      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	f040 80cd 	bne.w	8002828 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269a:	f7fe fc25 	bl	8000ee8 <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026a2:	f7fe fc21 	bl	8000ee8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d903      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0ba      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c4:	d0ed      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02e      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d12a      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026ee:	4b51      	ldr	r3, [pc, #324]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	0f1b      	lsrs	r3, r3, #28
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	019a      	lsls	r2, r3, #6
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	4944      	ldr	r1, [pc, #272]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800272a:	4b42      	ldr	r3, [pc, #264]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800272c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002730:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	493d      	ldr	r1, [pc, #244]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d022      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002758:	d11d      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800275a:	4b36      	ldr	r3, [pc, #216]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	0e1b      	lsrs	r3, r3, #24
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002768:	4b32      	ldr	r3, [pc, #200]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	0f1b      	lsrs	r3, r3, #28
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	019a      	lsls	r2, r3, #6
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	061b      	lsls	r3, r3, #24
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	071b      	lsls	r3, r3, #28
 800278e:	4929      	ldr	r1, [pc, #164]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d028      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	0e1b      	lsrs	r3, r3, #24
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	019a      	lsls	r2, r3, #6
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	431a      	orrs	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	071b      	lsls	r3, r3, #28
 80027d6:	4917      	ldr	r1, [pc, #92]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	4911      	ldr	r1, [pc, #68]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe fb72 	bl	8000ee8 <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002808:	f7fe fb6e 	bl	8000ee8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e007      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002826:	d1ef      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e049      	b.n	80028de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f9f8 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f000 fb86 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d001      	beq.n	8002900 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e04c      	b.n	800299a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a26      	ldr	r2, [pc, #152]	; (80029a8 <HAL_TIM_Base_Start+0xc0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d022      	beq.n	8002958 <HAL_TIM_Base_Start+0x70>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d01d      	beq.n	8002958 <HAL_TIM_Base_Start+0x70>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a22      	ldr	r2, [pc, #136]	; (80029ac <HAL_TIM_Base_Start+0xc4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d018      	beq.n	8002958 <HAL_TIM_Base_Start+0x70>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_TIM_Base_Start+0xc8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_TIM_Base_Start+0x70>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_TIM_Base_Start+0xcc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_TIM_Base_Start+0x70>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <HAL_TIM_Base_Start+0xd0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_TIM_Base_Start+0x70>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <HAL_TIM_Base_Start+0xd4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_TIM_Base_Start+0x70>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_TIM_Base_Start+0xd8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d115      	bne.n	8002984 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_TIM_Base_Start+0xdc>)
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b06      	cmp	r3, #6
 8002968:	d015      	beq.n	8002996 <HAL_TIM_Base_Start+0xae>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d011      	beq.n	8002996 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	e008      	b.n	8002996 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e000      	b.n	8002998 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40010400 	.word	0x40010400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40001800 	.word	0x40001800
 80029c4:	00010007 	.word	0x00010007

080029c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10f      	bne.n	8002a00 <HAL_TIM_Base_Stop+0x38>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	f240 4344 	movw	r3, #1092	; 0x444
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <HAL_TIM_Base_Stop+0x38>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d001      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e054      	b.n	8002ada <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d022      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5a:	d01d      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a22      	ldr	r2, [pc, #136]	; (8002aec <HAL_TIM_Base_Start_IT+0xd4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d018      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_TIM_Base_Start_IT+0xe4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <HAL_TIM_Base_Start_IT+0xe8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d115      	bne.n	8002ac4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_TIM_Base_Start_IT+0xec>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d015      	beq.n	8002ad6 <HAL_TIM_Base_Start_IT+0xbe>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d011      	beq.n	8002ad6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	e008      	b.n	8002ad6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e000      	b.n	8002ad8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	40010400 	.word	0x40010400
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40001800 	.word	0x40001800
 8002b04:	00010007 	.word	0x00010007

08002b08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <HAL_TIM_Base_Stop_IT+0x48>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	f240 4344 	movw	r3, #1092	; 0x444
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_Base_Stop_IT+0x48>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d122      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d11b      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f06f 0202 	mvn.w	r2, #2
 8002b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f9cf 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002bae:	e005      	b.n	8002bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f9c1 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9d2 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d122      	bne.n	8002c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d11b      	bne.n	8002c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f06f 0204 	mvn.w	r2, #4
 8002be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9a5 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002c02:	e005      	b.n	8002c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f997 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9a8 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d122      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d11b      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0208 	mvn.w	r2, #8
 8002c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f97b 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002c56:	e005      	b.n	8002c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f96d 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f97e 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d122      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d11b      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f06f 0210 	mvn.w	r2, #16
 8002c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2208      	movs	r2, #8
 8002c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f951 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002caa:	e005      	b.n	8002cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f943 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f954 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d10e      	bne.n	8002cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0201 	mvn.w	r2, #1
 8002ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fd fd8d 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d10e      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d107      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fb0b 	bl	800332c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fafe 	bl	8003340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f902 	bl	8002f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0220 	mvn.w	r2, #32
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fabe 	bl	8003318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0b4      	b.n	8002f2a <HAL_TIM_ConfigClockSource+0x186>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <HAL_TIM_ConfigClockSource+0x190>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d03e      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0xd4>
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	f200 8087 	bhi.w	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	f000 8086 	beq.w	8002f16 <HAL_TIM_ConfigClockSource+0x172>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	d87f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b70      	cmp	r3, #112	; 0x70
 8002e12:	d01a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0xa6>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d87b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b60      	cmp	r3, #96	; 0x60
 8002e1a:	d050      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x11a>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d877      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d03c      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xfa>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d873      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d058      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x13a>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d86f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b30      	cmp	r3, #48	; 0x30
 8002e32:	d064      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d86b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d060      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d867      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d05a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	e062      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e5a:	f000 f9af 	bl	80031bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	609a      	str	r2, [r3, #8]
      break;
 8002e76:	e04f      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e88:	f000 f998 	bl	80031bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9a:	609a      	str	r2, [r3, #8]
      break;
 8002e9c:	e03c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f90c 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2150      	movs	r1, #80	; 0x50
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f965 	bl	8003186 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e02c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 f92b 	bl	8003126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2160      	movs	r1, #96	; 0x60
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f955 	bl	8003186 <TIM_ITRx_SetConfig>
      break;
 8002edc:	e01c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 f8ec 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2140      	movs	r1, #64	; 0x40
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f945 	bl	8003186 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 f93c 	bl	8003186 <TIM_ITRx_SetConfig>
      break;
 8002f0e:	e003      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e000      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	fffeff88 	.word	0xfffeff88

08002f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d00f      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3d      	ldr	r2, [pc, #244]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00b      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d007      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d003      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d108      	bne.n	8002fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2f      	ldr	r2, [pc, #188]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d027      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d023      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01f      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a29      	ldr	r2, [pc, #164]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d017      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <TIM_Base_SetConfig+0x128>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <TIM_Base_SetConfig+0x12c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00f      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <TIM_Base_SetConfig+0x130>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a25      	ldr	r2, [pc, #148]	; (80030bc <TIM_Base_SetConfig+0x134>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <TIM_Base_SetConfig+0x138>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <TIM_Base_SetConfig+0x13c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <TIM_Base_SetConfig+0x114>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0xf8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <TIM_Base_SetConfig+0x124>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40010400 	.word	0x40010400
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40014400 	.word	0x40014400
 80030b8:	40014800 	.word	0x40014800
 80030bc:	40001800 	.word	0x40001800
 80030c0:	40001c00 	.word	0x40001c00
 80030c4:	40002000 	.word	0x40002000

080030c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0201 	bic.w	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 030a 	bic.w	r3, r3, #10
 8003104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003126:	b480      	push	{r7}
 8003128:	b087      	sub	sp, #28
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0210 	bic.w	r2, r3, #16
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	031b      	lsls	r3, r3, #12
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	621a      	str	r2, [r3, #32]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f043 0307 	orr.w	r3, r3, #7
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	021a      	lsls	r2, r3, #8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003210:	2302      	movs	r3, #2
 8003212:	e06d      	b.n	80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a30      	ldr	r2, [pc, #192]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800324e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a20      	ldr	r2, [pc, #128]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d022      	beq.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d01d      	beq.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d018      	beq.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00e      	beq.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d10c      	bne.n	80032de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40010000 	.word	0x40010000
 8003300:	40010400 	.word	0x40010400
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40014000 	.word	0x40014000
 8003314:	40001800 	.word	0x40001800

08003318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e040      	b.n	80033e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fcd4 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fb62 	bl	8003a5c <UART_SetConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e022      	b.n	80033e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fdba 	bl	8003f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fe41 	bl	8004068 <UART_CheckIdleState>
 80033e6:	4603      	mov	r3, r0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003404:	2b20      	cmp	r3, #32
 8003406:	d132      	bne.n	800346e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_UART_Receive_IT+0x24>
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e02b      	b.n	8003470 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d018      	beq.n	800345e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	613b      	str	r3, [r7, #16]
   return(result);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	69f9      	ldr	r1, [r7, #28]
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	61bb      	str	r3, [r7, #24]
   return(result);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e6      	bne.n	800342c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	461a      	mov	r2, r3
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fefd 	bl	8004264 <UART_Start_Receive_IT>
 800346a:	4603      	mov	r3, r0
 800346c:	e000      	b.n	8003470 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3728      	adds	r7, #40	; 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b0ba      	sub	sp, #232	; 0xe8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800349e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80034a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80034a6:	4013      	ands	r3, r2
 80034a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80034ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d115      	bne.n	80034e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00f      	beq.n	80034e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8297 	beq.w	8003a04 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
      }
      return;
 80034de:	e291      	b.n	8003a04 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8117 	beq.w	8003718 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034fa:	4b85      	ldr	r3, [pc, #532]	; (8003710 <HAL_UART_IRQHandler+0x298>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 810a 	beq.w	8003718 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d011      	beq.n	8003534 <HAL_UART_IRQHandler+0xbc>
 8003510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d011      	beq.n	8003564 <HAL_UART_IRQHandler+0xec>
 8003540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2202      	movs	r2, #2
 8003552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d011      	beq.n	8003594 <HAL_UART_IRQHandler+0x11c>
 8003570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2204      	movs	r2, #4
 8003582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d017      	beq.n	80035d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2208      	movs	r2, #8
 80035be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c6:	f043 0208 	orr.w	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d012      	beq.n	8003602 <HAL_UART_IRQHandler+0x18a>
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00c      	beq.n	8003602 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 81fd 	beq.w	8003a08 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d005      	beq.n	800365a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800364e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003652:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04f      	beq.n	80036fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fec8 	bl	80043f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d141      	bne.n	80036f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3308      	adds	r3, #8
 8003674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800369a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800369e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1d9      	bne.n	800366e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d013      	beq.n	80036ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <HAL_UART_IRQHandler+0x29c>)
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fd97 	bl	8001202 <HAL_DMA_Abort_IT>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d017      	beq.n	800370a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	e00f      	b.n	800370a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9a0 	bl	8003a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	e00b      	b.n	800370a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f99c 	bl	8003a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	e007      	b.n	800370a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f998 	bl	8003a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003708:	e17e      	b.n	8003a08 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370a:	bf00      	nop
    return;
 800370c:	e17c      	b.n	8003a08 <HAL_UART_IRQHandler+0x590>
 800370e:	bf00      	nop
 8003710:	04000120 	.word	0x04000120
 8003714:	080044b9 	.word	0x080044b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	2b01      	cmp	r3, #1
 800371e:	f040 814c 	bne.w	80039ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8145 	beq.w	80039ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 813e 	beq.w	80039ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2210      	movs	r2, #16
 8003744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	f040 80b6 	bne.w	80038c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003762:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8150 	beq.w	8003a0c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003776:	429a      	cmp	r2, r3
 8003778:	f080 8148 	bcs.w	8003a0c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003782:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003790:	f000 8086 	beq.w	80038a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1da      	bne.n	8003794 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003802:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003806:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800380a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e1      	bne.n	80037de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3308      	adds	r3, #8
 8003820:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800382a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3308      	adds	r3, #8
 800383a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800383e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003840:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003844:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800384c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e3      	bne.n	800381a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800386e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003870:	f023 0310 	bic.w	r3, r3, #16
 8003874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003882:	65bb      	str	r3, [r7, #88]	; 0x58
 8003884:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e4      	bne.n	8003860 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fc41 	bl	8001122 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8c2 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038c0:	e0a4      	b.n	8003a0c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8096 	beq.w	8003a10 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80038e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8091 	beq.w	8003a10 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003902:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
 8003912:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e4      	bne.n	80038ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	623b      	str	r3, [r7, #32]
   return(result);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3308      	adds	r3, #8
 8003944:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003948:	633a      	str	r2, [r7, #48]	; 0x30
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800394e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e3      	bne.n	8003924 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	60fb      	str	r3, [r7, #12]
   return(result);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f023 0310 	bic.w	r3, r3, #16
 8003984:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	617b      	str	r3, [r7, #20]
   return(result);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e4      	bne.n	8003970 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039b0:	4619      	mov	r1, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f846 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039b8:	e02a      	b.n	8003a10 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01c      	beq.n	8003a14 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
    }
    return;
 80039e2:	e017      	b.n	8003a14 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_UART_IRQHandler+0x59e>
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fd71 	bl	80044e4 <UART_EndTransmit_IT>
    return;
 8003a02:	e008      	b.n	8003a16 <HAL_UART_IRQHandler+0x59e>
      return;
 8003a04:	bf00      	nop
 8003a06:	e006      	b.n	8003a16 <HAL_UART_IRQHandler+0x59e>
    return;
 8003a08:	bf00      	nop
 8003a0a:	e004      	b.n	8003a16 <HAL_UART_IRQHandler+0x59e>
      return;
 8003a0c:	bf00      	nop
 8003a0e:	e002      	b.n	8003a16 <HAL_UART_IRQHandler+0x59e>
      return;
 8003a10:	bf00      	nop
 8003a12:	e000      	b.n	8003a16 <HAL_UART_IRQHandler+0x59e>
    return;
 8003a14:	bf00      	nop
  }

}
 8003a16:	37e8      	adds	r7, #232	; 0xe8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4ba6      	ldr	r3, [pc, #664]	; (8003d20 <UART_SetConfig+0x2c4>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	6979      	ldr	r1, [r7, #20]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a94      	ldr	r2, [pc, #592]	; (8003d24 <UART_SetConfig+0x2c8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d120      	bne.n	8003b1a <UART_SetConfig+0xbe>
 8003ad8:	4b93      	ldr	r3, [pc, #588]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d816      	bhi.n	8003b14 <UART_SetConfig+0xb8>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x90>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003afd 	.word	0x08003afd
 8003af0:	08003b09 	.word	0x08003b09
 8003af4:	08003b03 	.word	0x08003b03
 8003af8:	08003b0f 	.word	0x08003b0f
 8003afc:	2301      	movs	r3, #1
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e150      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b02:	2302      	movs	r3, #2
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e14d      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e14a      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e147      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b14:	2310      	movs	r3, #16
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e144      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a83      	ldr	r2, [pc, #524]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d132      	bne.n	8003b8a <UART_SetConfig+0x12e>
 8003b24:	4b80      	ldr	r3, [pc, #512]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d828      	bhi.n	8003b84 <UART_SetConfig+0x128>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <UART_SetConfig+0xdc>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b85 	.word	0x08003b85
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003b73 	.word	0x08003b73
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003b85 	.word	0x08003b85
 8003b68:	08003b7f 	.word	0x08003b7f
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e118      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b72:	2302      	movs	r3, #2
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e115      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e112      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e10f      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b84:	2310      	movs	r3, #16
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e10c      	b.n	8003da4 <UART_SetConfig+0x348>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a68      	ldr	r2, [pc, #416]	; (8003d30 <UART_SetConfig+0x2d4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d120      	bne.n	8003bd6 <UART_SetConfig+0x17a>
 8003b94:	4b64      	ldr	r3, [pc, #400]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d013      	beq.n	8003bca <UART_SetConfig+0x16e>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d814      	bhi.n	8003bd0 <UART_SetConfig+0x174>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d009      	beq.n	8003bbe <UART_SetConfig+0x162>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d810      	bhi.n	8003bd0 <UART_SetConfig+0x174>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <UART_SetConfig+0x15c>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d006      	beq.n	8003bc4 <UART_SetConfig+0x168>
 8003bb6:	e00b      	b.n	8003bd0 <UART_SetConfig+0x174>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e0f2      	b.n	8003da4 <UART_SetConfig+0x348>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e0ef      	b.n	8003da4 <UART_SetConfig+0x348>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e0ec      	b.n	8003da4 <UART_SetConfig+0x348>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e0e9      	b.n	8003da4 <UART_SetConfig+0x348>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e0e6      	b.n	8003da4 <UART_SetConfig+0x348>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a56      	ldr	r2, [pc, #344]	; (8003d34 <UART_SetConfig+0x2d8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d120      	bne.n	8003c22 <UART_SetConfig+0x1c6>
 8003be0:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bea:	2bc0      	cmp	r3, #192	; 0xc0
 8003bec:	d013      	beq.n	8003c16 <UART_SetConfig+0x1ba>
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d814      	bhi.n	8003c1c <UART_SetConfig+0x1c0>
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d009      	beq.n	8003c0a <UART_SetConfig+0x1ae>
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d810      	bhi.n	8003c1c <UART_SetConfig+0x1c0>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x1a8>
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d006      	beq.n	8003c10 <UART_SetConfig+0x1b4>
 8003c02:	e00b      	b.n	8003c1c <UART_SetConfig+0x1c0>
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e0cc      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e0c9      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c10:	2304      	movs	r3, #4
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e0c6      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c16:	2308      	movs	r3, #8
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e0c3      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e0c0      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a44      	ldr	r2, [pc, #272]	; (8003d38 <UART_SetConfig+0x2dc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d125      	bne.n	8003c78 <UART_SetConfig+0x21c>
 8003c2c:	4b3e      	ldr	r3, [pc, #248]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3a:	d017      	beq.n	8003c6c <UART_SetConfig+0x210>
 8003c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c40:	d817      	bhi.n	8003c72 <UART_SetConfig+0x216>
 8003c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c46:	d00b      	beq.n	8003c60 <UART_SetConfig+0x204>
 8003c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4c:	d811      	bhi.n	8003c72 <UART_SetConfig+0x216>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <UART_SetConfig+0x1fe>
 8003c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c56:	d006      	beq.n	8003c66 <UART_SetConfig+0x20a>
 8003c58:	e00b      	b.n	8003c72 <UART_SetConfig+0x216>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e0a1      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c60:	2302      	movs	r3, #2
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e09e      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c66:	2304      	movs	r3, #4
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e09b      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e098      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c72:	2310      	movs	r3, #16
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e095      	b.n	8003da4 <UART_SetConfig+0x348>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2f      	ldr	r2, [pc, #188]	; (8003d3c <UART_SetConfig+0x2e0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d125      	bne.n	8003cce <UART_SetConfig+0x272>
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c90:	d017      	beq.n	8003cc2 <UART_SetConfig+0x266>
 8003c92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c96:	d817      	bhi.n	8003cc8 <UART_SetConfig+0x26c>
 8003c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9c:	d00b      	beq.n	8003cb6 <UART_SetConfig+0x25a>
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d811      	bhi.n	8003cc8 <UART_SetConfig+0x26c>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <UART_SetConfig+0x254>
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cac:	d006      	beq.n	8003cbc <UART_SetConfig+0x260>
 8003cae:	e00b      	b.n	8003cc8 <UART_SetConfig+0x26c>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e076      	b.n	8003da4 <UART_SetConfig+0x348>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e073      	b.n	8003da4 <UART_SetConfig+0x348>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e070      	b.n	8003da4 <UART_SetConfig+0x348>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e06d      	b.n	8003da4 <UART_SetConfig+0x348>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e06a      	b.n	8003da4 <UART_SetConfig+0x348>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <UART_SetConfig+0x2e4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d138      	bne.n	8003d4a <UART_SetConfig+0x2ee>
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ce6:	d017      	beq.n	8003d18 <UART_SetConfig+0x2bc>
 8003ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cec:	d82a      	bhi.n	8003d44 <UART_SetConfig+0x2e8>
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf2:	d00b      	beq.n	8003d0c <UART_SetConfig+0x2b0>
 8003cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf8:	d824      	bhi.n	8003d44 <UART_SetConfig+0x2e8>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <UART_SetConfig+0x2aa>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	d006      	beq.n	8003d12 <UART_SetConfig+0x2b6>
 8003d04:	e01e      	b.n	8003d44 <UART_SetConfig+0x2e8>
 8003d06:	2300      	movs	r3, #0
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e04b      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e048      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d12:	2304      	movs	r3, #4
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e045      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d18:	2308      	movs	r3, #8
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e042      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d1e:	bf00      	nop
 8003d20:	efff69f3 	.word	0xefff69f3
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40004400 	.word	0x40004400
 8003d30:	40004800 	.word	0x40004800
 8003d34:	40004c00 	.word	0x40004c00
 8003d38:	40005000 	.word	0x40005000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	40007800 	.word	0x40007800
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e02c      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a72      	ldr	r2, [pc, #456]	; (8003f18 <UART_SetConfig+0x4bc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d125      	bne.n	8003da0 <UART_SetConfig+0x344>
 8003d54:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <UART_SetConfig+0x4c0>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d62:	d017      	beq.n	8003d94 <UART_SetConfig+0x338>
 8003d64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d68:	d817      	bhi.n	8003d9a <UART_SetConfig+0x33e>
 8003d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6e:	d00b      	beq.n	8003d88 <UART_SetConfig+0x32c>
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	d811      	bhi.n	8003d9a <UART_SetConfig+0x33e>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <UART_SetConfig+0x326>
 8003d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d7e:	d006      	beq.n	8003d8e <UART_SetConfig+0x332>
 8003d80:	e00b      	b.n	8003d9a <UART_SetConfig+0x33e>
 8003d82:	2300      	movs	r3, #0
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e00d      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e00a      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d8e:	2304      	movs	r3, #4
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e007      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d94:	2308      	movs	r3, #8
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e004      	b.n	8003da4 <UART_SetConfig+0x348>
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e001      	b.n	8003da4 <UART_SetConfig+0x348>
 8003da0:	2310      	movs	r3, #16
 8003da2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d15b      	bne.n	8003e66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003dae:	7ffb      	ldrb	r3, [r7, #31]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d828      	bhi.n	8003e06 <UART_SetConfig+0x3aa>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UART_SetConfig+0x360>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003e07 	.word	0x08003e07
 8003dcc:	08003df7 	.word	0x08003df7
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003e07 	.word	0x08003e07
 8003dd8:	08003e07 	.word	0x08003e07
 8003ddc:	08003dff 	.word	0x08003dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7fe f912 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8003de4:	61b8      	str	r0, [r7, #24]
        break;
 8003de6:	e013      	b.n	8003e10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7fe f922 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 8003dec:	61b8      	str	r0, [r7, #24]
        break;
 8003dee:	e00f      	b.n	8003e10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df0:	4b4b      	ldr	r3, [pc, #300]	; (8003f20 <UART_SetConfig+0x4c4>)
 8003df2:	61bb      	str	r3, [r7, #24]
        break;
 8003df4:	e00c      	b.n	8003e10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df6:	f7fd fff5 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8003dfa:	61b8      	str	r0, [r7, #24]
        break;
 8003dfc:	e008      	b.n	8003e10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e004      	b.n	8003e10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d074      	beq.n	8003f00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	005a      	lsls	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	441a      	add	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d916      	bls.n	8003e60 <UART_SetConfig+0x404>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d212      	bcs.n	8003e60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	89fa      	ldrh	r2, [r7, #14]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	e04f      	b.n	8003f00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	77bb      	strb	r3, [r7, #30]
 8003e64:	e04c      	b.n	8003f00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d828      	bhi.n	8003ebe <UART_SetConfig+0x462>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0x418>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea9 	.word	0x08003ea9
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe f8b6 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	61b8      	str	r0, [r7, #24]
        break;
 8003e9e:	e013      	b.n	8003ec8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe f8c6 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	61b8      	str	r0, [r7, #24]
        break;
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <UART_SetConfig+0x4c4>)
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e00c      	b.n	8003ec8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fd ff99 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	61b8      	str	r0, [r7, #24]
        break;
 8003eb4:	e008      	b.n	8003ec8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	61bb      	str	r3, [r7, #24]
        break;
 8003ebc:	e004      	b.n	8003ec8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ec6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	085a      	lsrs	r2, r3, #1
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b0f      	cmp	r3, #15
 8003ee6:	d909      	bls.n	8003efc <UART_SetConfig+0x4a0>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eee:	d205      	bcs.n	8003efc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	e001      	b.n	8003f00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40007c00 	.word	0x40007c00
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	00f42400 	.word	0x00f42400

08003f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01a      	beq.n	800403a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004022:	d10a      	bne.n	800403a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004078:	f7fc ff36 	bl	8000ee8 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b08      	cmp	r3, #8
 800408a:	d10e      	bne.n	80040aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800408c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f81b 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e011      	b.n	80040ce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b09c      	sub	sp, #112	; 0x70
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	e0a7      	b.n	8004238 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	f000 80a3 	beq.w	8004238 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fc fef9 	bl	8000ee8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <UART_WaitOnFlagUntilTimeout+0x32>
 8004102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004104:	2b00      	cmp	r3, #0
 8004106:	d13f      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800411c:	667b      	str	r3, [r7, #100]	; 0x64
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004128:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800412c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e6      	bne.n	8004108 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	663b      	str	r3, [r7, #96]	; 0x60
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800415a:	64ba      	str	r2, [r7, #72]	; 0x48
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e068      	b.n	800425a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d050      	beq.n	8004238 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d148      	bne.n	8004238 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34
 80041d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e6      	bne.n	80041b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3308      	adds	r3, #8
 80041e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	613b      	str	r3, [r7, #16]
   return(result);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3308      	adds	r3, #8
 8004200:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004202:	623a      	str	r2, [r7, #32]
 8004204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	69f9      	ldr	r1, [r7, #28]
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e5      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e010      	b.n	800425a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4013      	ands	r3, r2
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	429a      	cmp	r2, r3
 8004254:	f43f af48 	beq.w	80040e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3770      	adds	r7, #112	; 0x70
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004264:	b480      	push	{r7}
 8004266:	b097      	sub	sp, #92	; 0x5c
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d10e      	bne.n	80042b6 <UART_Start_Receive_IT+0x52>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <UART_Start_Receive_IT+0x48>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042aa:	e02d      	b.n	8004308 <UART_Start_Receive_IT+0xa4>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	22ff      	movs	r2, #255	; 0xff
 80042b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042b4:	e028      	b.n	8004308 <UART_Start_Receive_IT+0xa4>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <UART_Start_Receive_IT+0x76>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <UART_Start_Receive_IT+0x6c>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	22ff      	movs	r2, #255	; 0xff
 80042ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042ce:	e01b      	b.n	8004308 <UART_Start_Receive_IT+0xa4>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	227f      	movs	r2, #127	; 0x7f
 80042d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042d8:	e016      	b.n	8004308 <UART_Start_Receive_IT+0xa4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e2:	d10d      	bne.n	8004300 <UART_Start_Receive_IT+0x9c>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <UART_Start_Receive_IT+0x92>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	227f      	movs	r2, #127	; 0x7f
 80042f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f4:	e008      	b.n	8004308 <UART_Start_Receive_IT+0xa4>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	223f      	movs	r2, #63	; 0x3f
 80042fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042fe:	e003      	b.n	8004308 <UART_Start_Receive_IT+0xa4>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2222      	movs	r2, #34	; 0x22
 8004314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	657b      	str	r3, [r7, #84]	; 0x54
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004338:	64ba      	str	r2, [r7, #72]	; 0x48
 800433a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800433e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	d107      	bne.n	8004366 <UART_Start_Receive_IT+0x102>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <UART_Start_Receive_IT+0x184>)
 8004362:	669a      	str	r2, [r3, #104]	; 0x68
 8004364:	e002      	b.n	800436c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a20      	ldr	r2, [pc, #128]	; (80043ec <UART_Start_Receive_IT+0x188>)
 800436a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d019      	beq.n	80043a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
 8004394:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e6      	bne.n	8004374 <UART_Start_Receive_IT+0x110>
 80043a6:	e018      	b.n	80043da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	613b      	str	r3, [r7, #16]
   return(result);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f043 0320 	orr.w	r3, r3, #32
 80043bc:	653b      	str	r3, [r7, #80]	; 0x50
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	69f9      	ldr	r1, [r7, #28]
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	375c      	adds	r7, #92	; 0x5c
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	0800469f 	.word	0x0800469f
 80043ec:	08004539 	.word	0x08004539

080043f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b095      	sub	sp, #84	; 0x54
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800440c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004416:	643b      	str	r3, [r7, #64]	; 0x40
 8004418:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800441c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e6      	bne.n	80043f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	61fb      	str	r3, [r7, #28]
   return(result);
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	64bb      	str	r3, [r7, #72]	; 0x48
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3308      	adds	r3, #8
 8004448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e5      	bne.n	800442a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	2b01      	cmp	r3, #1
 8004464:	d118      	bne.n	8004498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	60bb      	str	r3, [r7, #8]
   return(result);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f023 0310 	bic.w	r3, r3, #16
 800447a:	647b      	str	r3, [r7, #68]	; 0x44
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6979      	ldr	r1, [r7, #20]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	613b      	str	r3, [r7, #16]
   return(result);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e6      	bne.n	8004466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044ac:	bf00      	nop
 80044ae:	3754      	adds	r7, #84	; 0x54
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff faaa 	bl	8003a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6979      	ldr	r1, [r7, #20]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	613b      	str	r3, [r7, #16]
   return(result);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e6      	bne.n	80044ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff fa76 	bl	8003a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004530:	bf00      	nop
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b096      	sub	sp, #88	; 0x58
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004546:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004550:	2b22      	cmp	r3, #34	; 0x22
 8004552:	f040 8098 	bne.w	8004686 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004560:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004564:	b2d9      	uxtb	r1, r3
 8004566:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800456a:	b2da      	uxtb	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	400a      	ands	r2, r1
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d17b      	bne.n	8004696 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b2:	653b      	str	r3, [r7, #80]	; 0x50
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045bc:	647b      	str	r3, [r7, #68]	; 0x44
 80045be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	623b      	str	r3, [r7, #32]
   return(result);
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3308      	adds	r3, #8
 80045ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f0:	633a      	str	r2, [r7, #48]	; 0x30
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e5      	bne.n	80045d0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461c:	2b01      	cmp	r3, #1
 800461e:	d12e      	bne.n	800467e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60fb      	str	r3, [r7, #12]
   return(result);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0310 	bic.w	r3, r3, #16
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	617b      	str	r3, [r7, #20]
   return(result);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e6      	bne.n	8004626 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b10      	cmp	r3, #16
 8004664:	d103      	bne.n	800466e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2210      	movs	r2, #16
 800466c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff f9e4 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800467c:	e00b      	b.n	8004696 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc f906 	bl	8000890 <HAL_UART_RxCpltCallback>
}
 8004684:	e007      	b.n	8004696 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0208 	orr.w	r2, r2, #8
 8004694:	619a      	str	r2, [r3, #24]
}
 8004696:	bf00      	nop
 8004698:	3758      	adds	r7, #88	; 0x58
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b096      	sub	sp, #88	; 0x58
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	2b22      	cmp	r3, #34	; 0x22
 80046b8:	f040 8098 	bne.w	80047ec <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80046cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80046d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046d4:	4013      	ands	r3, r2
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d17b      	bne.n	80047fc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	643b      	str	r3, [r7, #64]	; 0x40
 8004724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3308      	adds	r3, #8
 800473c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	61fb      	str	r3, [r7, #28]
   return(result);
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	2b01      	cmp	r3, #1
 8004784:	d12e      	bne.n	80047e4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	60bb      	str	r3, [r7, #8]
   return(result);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f023 0310 	bic.w	r3, r3, #16
 80047a0:	647b      	str	r3, [r7, #68]	; 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	613b      	str	r3, [r7, #16]
   return(result);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d103      	bne.n	80047d4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2210      	movs	r2, #16
 80047d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff f931 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047e2:	e00b      	b.n	80047fc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc f853 	bl	8000890 <HAL_UART_RxCpltCallback>
}
 80047ea:	e007      	b.n	80047fc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	619a      	str	r2, [r3, #24]
}
 80047fc:	bf00      	nop
 80047fe:	3758      	adds	r7, #88	; 0x58
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_strtol_l.constprop.0>:
 8004804:	2b01      	cmp	r3, #1
 8004806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480a:	d001      	beq.n	8004810 <_strtol_l.constprop.0+0xc>
 800480c:	2b24      	cmp	r3, #36	; 0x24
 800480e:	d906      	bls.n	800481e <_strtol_l.constprop.0+0x1a>
 8004810:	f000 f88c 	bl	800492c <__errno>
 8004814:	2316      	movs	r3, #22
 8004816:	6003      	str	r3, [r0, #0]
 8004818:	2000      	movs	r0, #0
 800481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004904 <_strtol_l.constprop.0+0x100>
 8004822:	460d      	mov	r5, r1
 8004824:	462e      	mov	r6, r5
 8004826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800482a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800482e:	f017 0708 	ands.w	r7, r7, #8
 8004832:	d1f7      	bne.n	8004824 <_strtol_l.constprop.0+0x20>
 8004834:	2c2d      	cmp	r4, #45	; 0x2d
 8004836:	d132      	bne.n	800489e <_strtol_l.constprop.0+0x9a>
 8004838:	782c      	ldrb	r4, [r5, #0]
 800483a:	2701      	movs	r7, #1
 800483c:	1cb5      	adds	r5, r6, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d05b      	beq.n	80048fa <_strtol_l.constprop.0+0xf6>
 8004842:	2b10      	cmp	r3, #16
 8004844:	d109      	bne.n	800485a <_strtol_l.constprop.0+0x56>
 8004846:	2c30      	cmp	r4, #48	; 0x30
 8004848:	d107      	bne.n	800485a <_strtol_l.constprop.0+0x56>
 800484a:	782c      	ldrb	r4, [r5, #0]
 800484c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004850:	2c58      	cmp	r4, #88	; 0x58
 8004852:	d14d      	bne.n	80048f0 <_strtol_l.constprop.0+0xec>
 8004854:	786c      	ldrb	r4, [r5, #1]
 8004856:	2310      	movs	r3, #16
 8004858:	3502      	adds	r5, #2
 800485a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800485e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004862:	f04f 0e00 	mov.w	lr, #0
 8004866:	fbb8 f9f3 	udiv	r9, r8, r3
 800486a:	4676      	mov	r6, lr
 800486c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004870:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004874:	f1bc 0f09 	cmp.w	ip, #9
 8004878:	d816      	bhi.n	80048a8 <_strtol_l.constprop.0+0xa4>
 800487a:	4664      	mov	r4, ip
 800487c:	42a3      	cmp	r3, r4
 800487e:	dd24      	ble.n	80048ca <_strtol_l.constprop.0+0xc6>
 8004880:	f1be 3fff 	cmp.w	lr, #4294967295
 8004884:	d008      	beq.n	8004898 <_strtol_l.constprop.0+0x94>
 8004886:	45b1      	cmp	r9, r6
 8004888:	d31c      	bcc.n	80048c4 <_strtol_l.constprop.0+0xc0>
 800488a:	d101      	bne.n	8004890 <_strtol_l.constprop.0+0x8c>
 800488c:	45a2      	cmp	sl, r4
 800488e:	db19      	blt.n	80048c4 <_strtol_l.constprop.0+0xc0>
 8004890:	fb06 4603 	mla	r6, r6, r3, r4
 8004894:	f04f 0e01 	mov.w	lr, #1
 8004898:	f815 4b01 	ldrb.w	r4, [r5], #1
 800489c:	e7e8      	b.n	8004870 <_strtol_l.constprop.0+0x6c>
 800489e:	2c2b      	cmp	r4, #43	; 0x2b
 80048a0:	bf04      	itt	eq
 80048a2:	782c      	ldrbeq	r4, [r5, #0]
 80048a4:	1cb5      	addeq	r5, r6, #2
 80048a6:	e7ca      	b.n	800483e <_strtol_l.constprop.0+0x3a>
 80048a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80048ac:	f1bc 0f19 	cmp.w	ip, #25
 80048b0:	d801      	bhi.n	80048b6 <_strtol_l.constprop.0+0xb2>
 80048b2:	3c37      	subs	r4, #55	; 0x37
 80048b4:	e7e2      	b.n	800487c <_strtol_l.constprop.0+0x78>
 80048b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80048ba:	f1bc 0f19 	cmp.w	ip, #25
 80048be:	d804      	bhi.n	80048ca <_strtol_l.constprop.0+0xc6>
 80048c0:	3c57      	subs	r4, #87	; 0x57
 80048c2:	e7db      	b.n	800487c <_strtol_l.constprop.0+0x78>
 80048c4:	f04f 3eff 	mov.w	lr, #4294967295
 80048c8:	e7e6      	b.n	8004898 <_strtol_l.constprop.0+0x94>
 80048ca:	f1be 3fff 	cmp.w	lr, #4294967295
 80048ce:	d105      	bne.n	80048dc <_strtol_l.constprop.0+0xd8>
 80048d0:	2322      	movs	r3, #34	; 0x22
 80048d2:	6003      	str	r3, [r0, #0]
 80048d4:	4646      	mov	r6, r8
 80048d6:	b942      	cbnz	r2, 80048ea <_strtol_l.constprop.0+0xe6>
 80048d8:	4630      	mov	r0, r6
 80048da:	e79e      	b.n	800481a <_strtol_l.constprop.0+0x16>
 80048dc:	b107      	cbz	r7, 80048e0 <_strtol_l.constprop.0+0xdc>
 80048de:	4276      	negs	r6, r6
 80048e0:	2a00      	cmp	r2, #0
 80048e2:	d0f9      	beq.n	80048d8 <_strtol_l.constprop.0+0xd4>
 80048e4:	f1be 0f00 	cmp.w	lr, #0
 80048e8:	d000      	beq.n	80048ec <_strtol_l.constprop.0+0xe8>
 80048ea:	1e69      	subs	r1, r5, #1
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	e7f3      	b.n	80048d8 <_strtol_l.constprop.0+0xd4>
 80048f0:	2430      	movs	r4, #48	; 0x30
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1b1      	bne.n	800485a <_strtol_l.constprop.0+0x56>
 80048f6:	2308      	movs	r3, #8
 80048f8:	e7af      	b.n	800485a <_strtol_l.constprop.0+0x56>
 80048fa:	2c30      	cmp	r4, #48	; 0x30
 80048fc:	d0a5      	beq.n	800484a <_strtol_l.constprop.0+0x46>
 80048fe:	230a      	movs	r3, #10
 8004900:	e7ab      	b.n	800485a <_strtol_l.constprop.0+0x56>
 8004902:	bf00      	nop
 8004904:	080049b1 	.word	0x080049b1

08004908 <strtol>:
 8004908:	4613      	mov	r3, r2
 800490a:	460a      	mov	r2, r1
 800490c:	4601      	mov	r1, r0
 800490e:	4802      	ldr	r0, [pc, #8]	; (8004918 <strtol+0x10>)
 8004910:	6800      	ldr	r0, [r0, #0]
 8004912:	f7ff bf77 	b.w	8004804 <_strtol_l.constprop.0>
 8004916:	bf00      	nop
 8004918:	20000058 	.word	0x20000058

0800491c <memset>:
 800491c:	4402      	add	r2, r0
 800491e:	4603      	mov	r3, r0
 8004920:	4293      	cmp	r3, r2
 8004922:	d100      	bne.n	8004926 <memset+0xa>
 8004924:	4770      	bx	lr
 8004926:	f803 1b01 	strb.w	r1, [r3], #1
 800492a:	e7f9      	b.n	8004920 <memset+0x4>

0800492c <__errno>:
 800492c:	4b01      	ldr	r3, [pc, #4]	; (8004934 <__errno+0x8>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000058 	.word	0x20000058

08004938 <__libc_init_array>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4d0d      	ldr	r5, [pc, #52]	; (8004970 <__libc_init_array+0x38>)
 800493c:	4c0d      	ldr	r4, [pc, #52]	; (8004974 <__libc_init_array+0x3c>)
 800493e:	1b64      	subs	r4, r4, r5
 8004940:	10a4      	asrs	r4, r4, #2
 8004942:	2600      	movs	r6, #0
 8004944:	42a6      	cmp	r6, r4
 8004946:	d109      	bne.n	800495c <__libc_init_array+0x24>
 8004948:	4d0b      	ldr	r5, [pc, #44]	; (8004978 <__libc_init_array+0x40>)
 800494a:	4c0c      	ldr	r4, [pc, #48]	; (800497c <__libc_init_array+0x44>)
 800494c:	f000 f818 	bl	8004980 <_init>
 8004950:	1b64      	subs	r4, r4, r5
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	2600      	movs	r6, #0
 8004956:	42a6      	cmp	r6, r4
 8004958:	d105      	bne.n	8004966 <__libc_init_array+0x2e>
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004960:	4798      	blx	r3
 8004962:	3601      	adds	r6, #1
 8004964:	e7ee      	b.n	8004944 <__libc_init_array+0xc>
 8004966:	f855 3b04 	ldr.w	r3, [r5], #4
 800496a:	4798      	blx	r3
 800496c:	3601      	adds	r6, #1
 800496e:	e7f2      	b.n	8004956 <__libc_init_array+0x1e>
 8004970:	08004abc 	.word	0x08004abc
 8004974:	08004abc 	.word	0x08004abc
 8004978:	08004abc 	.word	0x08004abc
 800497c:	08004ac0 	.word	0x08004ac0

08004980 <_init>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr

0800498c <_fini>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr
